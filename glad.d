/*
OpenGL Loader for D-lang, generated by Gideon Grinberg using dstep. Original notice:

    OpenGL loader generated by glad 0.1.34 on Mon Apr 12 23:03:39 2021.

    Language/Generator: C/C++
    Specification: gl
    APIs: gl=3.2
    Profile: compatibility
    Extensions:

    Loader: True
    Local files: False
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --profile="compatibility" --api="gl=3.2" --generator="c" --spec="gl" --extensions=""
    Online:
        https://glad.dav1d.de/#profile=compatibility&language=c&specification=gl&loader=on&api=gl%3D3.2

*/

extern (import core.stdc.config;

C):

enum GLAPIENTRY = APIENTRY;

struct gladGLversionStruct
{
    int major;
    int minor;
}

alias GLADloadproc = void* function (const(char)* name);

extern __gshared gladGLversionStruct GLVersion;

int gladLoadGL ();

int gladLoadGLLoader (GLADloadproc);

alias GLenum = uint;
alias GLboolean = ubyte;
alias GLbitfield = uint;
alias GLvoid = void;
alias GLbyte = byte;
alias GLubyte = ubyte;
alias GLshort = short;
alias GLushort = ushort;
alias GLint = int;
alias GLuint = uint;
alias GLclampx = int;
alias GLsizei = int;
alias GLfloat = float;
alias GLclampf = float;
alias GLdouble = double;
alias GLclampd = double;
alias GLeglClientBufferEXT = void*;
alias GLeglImageOES = void*;
alias GLchar = char;
alias GLcharARB = char;
alias GLhandleARB = void*;

alias GLhalf = ushort;
alias GLhalfARB = ushort;
alias GLfixed = int;
alias GLintptr = c_long;
alias GLintptrARB = c_long;
alias GLsizeiptr = c_long;
alias GLsizeiptrARB = c_long;
alias GLint64 = long;
alias GLint64EXT = long;
alias GLuint64 = ulong;
alias GLuint64EXT = ulong;
struct __GLsync;
alias GLsync = __GLsync*;
struct _cl_context;
struct _cl_event;
alias GLDEBUGPROC = void function (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* message, const(void)* userParam);
alias GLDEBUGPROCARB = void function (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* message, const(void)* userParam);
alias GLDEBUGPROCKHR = void function (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* message, const(void)* userParam);
alias GLDEBUGPROCAMD = void function (GLuint id, GLenum category, GLenum severity, GLsizei length, const(GLchar)* message, void* userParam);
alias GLhalfNV = ushort;
alias GLvdpauSurfaceNV = c_long;
alias GLVULKANPROCNV = void function ();
enum GL_DEPTH_BUFFER_BIT = 0x00000100;
enum GL_STENCIL_BUFFER_BIT = 0x00000400;
enum GL_COLOR_BUFFER_BIT = 0x00004000;
enum GL_FALSE = 0;
enum GL_TRUE = 1;
enum GL_POINTS = 0x0000;
enum GL_LINES = 0x0001;
enum GL_LINE_LOOP = 0x0002;
enum GL_LINE_STRIP = 0x0003;
enum GL_TRIANGLES = 0x0004;
enum GL_TRIANGLE_STRIP = 0x0005;
enum GL_TRIANGLE_FAN = 0x0006;
enum GL_QUADS = 0x0007;
enum GL_NEVER = 0x0200;
enum GL_LESS = 0x0201;
enum GL_EQUAL = 0x0202;
enum GL_LEQUAL = 0x0203;
enum GL_GREATER = 0x0204;
enum GL_NOTEQUAL = 0x0205;
enum GL_GEQUAL = 0x0206;
enum GL_ALWAYS = 0x0207;
enum GL_ZERO = 0;
enum GL_ONE = 1;
enum GL_SRC_COLOR = 0x0300;
enum GL_ONE_MINUS_SRC_COLOR = 0x0301;
enum GL_SRC_ALPHA = 0x0302;
enum GL_ONE_MINUS_SRC_ALPHA = 0x0303;
enum GL_DST_ALPHA = 0x0304;
enum GL_ONE_MINUS_DST_ALPHA = 0x0305;
enum GL_DST_COLOR = 0x0306;
enum GL_ONE_MINUS_DST_COLOR = 0x0307;
enum GL_SRC_ALPHA_SATURATE = 0x0308;
enum GL_NONE = 0;
enum GL_FRONT_LEFT = 0x0400;
enum GL_FRONT_RIGHT = 0x0401;
enum GL_BACK_LEFT = 0x0402;
enum GL_BACK_RIGHT = 0x0403;
enum GL_FRONT = 0x0404;
enum GL_BACK = 0x0405;
enum GL_LEFT = 0x0406;
enum GL_RIGHT = 0x0407;
enum GL_FRONT_AND_BACK = 0x0408;
enum GL_NO_ERROR = 0;
enum GL_INVALID_ENUM = 0x0500;
enum GL_INVALID_VALUE = 0x0501;
enum GL_INVALID_OPERATION = 0x0502;
enum GL_OUT_OF_MEMORY = 0x0505;
enum GL_CW = 0x0900;
enum GL_CCW = 0x0901;
enum GL_POINT_SIZE = 0x0B11;
enum GL_POINT_SIZE_RANGE = 0x0B12;
enum GL_POINT_SIZE_GRANULARITY = 0x0B13;
enum GL_LINE_SMOOTH = 0x0B20;
enum GL_LINE_WIDTH = 0x0B21;
enum GL_LINE_WIDTH_RANGE = 0x0B22;
enum GL_LINE_WIDTH_GRANULARITY = 0x0B23;
enum GL_POLYGON_MODE = 0x0B40;
enum GL_POLYGON_SMOOTH = 0x0B41;
enum GL_CULL_FACE = 0x0B44;
enum GL_CULL_FACE_MODE = 0x0B45;
enum GL_FRONT_FACE = 0x0B46;
enum GL_DEPTH_RANGE = 0x0B70;
enum GL_DEPTH_TEST = 0x0B71;
enum GL_DEPTH_WRITEMASK = 0x0B72;
enum GL_DEPTH_CLEAR_VALUE = 0x0B73;
enum GL_DEPTH_FUNC = 0x0B74;
enum GL_STENCIL_TEST = 0x0B90;
enum GL_STENCIL_CLEAR_VALUE = 0x0B91;
enum GL_STENCIL_FUNC = 0x0B92;
enum GL_STENCIL_VALUE_MASK = 0x0B93;
enum GL_STENCIL_FAIL = 0x0B94;
enum GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
enum GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
enum GL_STENCIL_REF = 0x0B97;
enum GL_STENCIL_WRITEMASK = 0x0B98;
enum GL_VIEWPORT = 0x0BA2;
enum GL_DITHER = 0x0BD0;
enum GL_BLEND_DST = 0x0BE0;
enum GL_BLEND_SRC = 0x0BE1;
enum GL_BLEND = 0x0BE2;
enum GL_LOGIC_OP_MODE = 0x0BF0;
enum GL_DRAW_BUFFER = 0x0C01;
enum GL_READ_BUFFER = 0x0C02;
enum GL_SCISSOR_BOX = 0x0C10;
enum GL_SCISSOR_TEST = 0x0C11;
enum GL_COLOR_CLEAR_VALUE = 0x0C22;
enum GL_COLOR_WRITEMASK = 0x0C23;
enum GL_DOUBLEBUFFER = 0x0C32;
enum GL_STEREO = 0x0C33;
enum GL_LINE_SMOOTH_HINT = 0x0C52;
enum GL_POLYGON_SMOOTH_HINT = 0x0C53;
enum GL_UNPACK_SWAP_BYTES = 0x0CF0;
enum GL_UNPACK_LSB_FIRST = 0x0CF1;
enum GL_UNPACK_ROW_LENGTH = 0x0CF2;
enum GL_UNPACK_SKIP_ROWS = 0x0CF3;
enum GL_UNPACK_SKIP_PIXELS = 0x0CF4;
enum GL_UNPACK_ALIGNMENT = 0x0CF5;
enum GL_PACK_SWAP_BYTES = 0x0D00;
enum GL_PACK_LSB_FIRST = 0x0D01;
enum GL_PACK_ROW_LENGTH = 0x0D02;
enum GL_PACK_SKIP_ROWS = 0x0D03;
enum GL_PACK_SKIP_PIXELS = 0x0D04;
enum GL_PACK_ALIGNMENT = 0x0D05;
enum GL_MAX_TEXTURE_SIZE = 0x0D33;
enum GL_MAX_VIEWPORT_DIMS = 0x0D3A;
enum GL_SUBPIXEL_BITS = 0x0D50;
enum GL_TEXTURE_1D = 0x0DE0;
enum GL_TEXTURE_2D = 0x0DE1;
enum GL_TEXTURE_WIDTH = 0x1000;
enum GL_TEXTURE_HEIGHT = 0x1001;
enum GL_TEXTURE_BORDER_COLOR = 0x1004;
enum GL_DONT_CARE = 0x1100;
enum GL_FASTEST = 0x1101;
enum GL_NICEST = 0x1102;
enum GL_BYTE = 0x1400;
enum GL_UNSIGNED_BYTE = 0x1401;
enum GL_SHORT = 0x1402;
enum GL_UNSIGNED_SHORT = 0x1403;
enum GL_INT = 0x1404;
enum GL_UNSIGNED_INT = 0x1405;
enum GL_FLOAT = 0x1406;
enum GL_STACK_OVERFLOW = 0x0503;
enum GL_STACK_UNDERFLOW = 0x0504;
enum GL_CLEAR = 0x1500;
enum GL_AND = 0x1501;
enum GL_AND_REVERSE = 0x1502;
enum GL_COPY = 0x1503;
enum GL_AND_INVERTED = 0x1504;
enum GL_NOOP = 0x1505;
enum GL_XOR = 0x1506;
enum GL_OR = 0x1507;
enum GL_NOR = 0x1508;
enum GL_EQUIV = 0x1509;
enum GL_INVERT = 0x150A;
enum GL_OR_REVERSE = 0x150B;
enum GL_COPY_INVERTED = 0x150C;
enum GL_OR_INVERTED = 0x150D;
enum GL_NAND = 0x150E;
enum GL_SET = 0x150F;
enum GL_TEXTURE = 0x1702;
enum GL_COLOR = 0x1800;
enum GL_DEPTH = 0x1801;
enum GL_STENCIL = 0x1802;
enum GL_STENCIL_INDEX = 0x1901;
enum GL_DEPTH_COMPONENT = 0x1902;
enum GL_RED = 0x1903;
enum GL_GREEN = 0x1904;
enum GL_BLUE = 0x1905;
enum GL_ALPHA = 0x1906;
enum GL_RGB = 0x1907;
enum GL_RGBA = 0x1908;
enum GL_POINT = 0x1B00;
enum GL_LINE = 0x1B01;
enum GL_FILL = 0x1B02;
enum GL_KEEP = 0x1E00;
enum GL_REPLACE = 0x1E01;
enum GL_INCR = 0x1E02;
enum GL_DECR = 0x1E03;
enum GL_VENDOR = 0x1F00;
enum GL_RENDERER = 0x1F01;
enum GL_VERSION = 0x1F02;
enum GL_EXTENSIONS = 0x1F03;
enum GL_NEAREST = 0x2600;
enum GL_LINEAR = 0x2601;
enum GL_NEAREST_MIPMAP_NEAREST = 0x2700;
enum GL_LINEAR_MIPMAP_NEAREST = 0x2701;
enum GL_NEAREST_MIPMAP_LINEAR = 0x2702;
enum GL_LINEAR_MIPMAP_LINEAR = 0x2703;
enum GL_TEXTURE_MAG_FILTER = 0x2800;
enum GL_TEXTURE_MIN_FILTER = 0x2801;
enum GL_TEXTURE_WRAP_S = 0x2802;
enum GL_TEXTURE_WRAP_T = 0x2803;
enum GL_REPEAT = 0x2901;
enum GL_CURRENT_BIT = 0x00000001;
enum GL_POINT_BIT = 0x00000002;
enum GL_LINE_BIT = 0x00000004;
enum GL_POLYGON_BIT = 0x00000008;
enum GL_POLYGON_STIPPLE_BIT = 0x00000010;
enum GL_PIXEL_MODE_BIT = 0x00000020;
enum GL_LIGHTING_BIT = 0x00000040;
enum GL_FOG_BIT = 0x00000080;
enum GL_ACCUM_BUFFER_BIT = 0x00000200;
enum GL_VIEWPORT_BIT = 0x00000800;
enum GL_TRANSFORM_BIT = 0x00001000;
enum GL_ENABLE_BIT = 0x00002000;
enum GL_HINT_BIT = 0x00008000;
enum GL_EVAL_BIT = 0x00010000;
enum GL_LIST_BIT = 0x00020000;
enum GL_TEXTURE_BIT = 0x00040000;
enum GL_SCISSOR_BIT = 0x00080000;
enum GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum GL_QUAD_STRIP = 0x0008;
enum GL_POLYGON = 0x0009;
enum GL_ACCUM = 0x0100;
enum GL_LOAD = 0x0101;
enum GL_RETURN = 0x0102;
enum GL_MULT = 0x0103;
enum GL_ADD = 0x0104;
enum GL_AUX0 = 0x0409;
enum GL_AUX1 = 0x040A;
enum GL_AUX2 = 0x040B;
enum GL_AUX3 = 0x040C;
enum GL_2D = 0x0600;
enum GL_3D = 0x0601;
enum GL_3D_COLOR = 0x0602;
enum GL_3D_COLOR_TEXTURE = 0x0603;
enum GL_4D_COLOR_TEXTURE = 0x0604;
enum GL_PASS_THROUGH_TOKEN = 0x0700;
enum GL_POINT_TOKEN = 0x0701;
enum GL_LINE_TOKEN = 0x0702;
enum GL_POLYGON_TOKEN = 0x0703;
enum GL_BITMAP_TOKEN = 0x0704;
enum GL_DRAW_PIXEL_TOKEN = 0x0705;
enum GL_COPY_PIXEL_TOKEN = 0x0706;
enum GL_LINE_RESET_TOKEN = 0x0707;
enum GL_EXP = 0x0800;
enum GL_EXP2 = 0x0801;
enum GL_COEFF = 0x0A00;
enum GL_ORDER = 0x0A01;
enum GL_DOMAIN = 0x0A02;
enum GL_PIXEL_MAP_I_TO_I = 0x0C70;
enum GL_PIXEL_MAP_S_TO_S = 0x0C71;
enum GL_PIXEL_MAP_I_TO_R = 0x0C72;
enum GL_PIXEL_MAP_I_TO_G = 0x0C73;
enum GL_PIXEL_MAP_I_TO_B = 0x0C74;
enum GL_PIXEL_MAP_I_TO_A = 0x0C75;
enum GL_PIXEL_MAP_R_TO_R = 0x0C76;
enum GL_PIXEL_MAP_G_TO_G = 0x0C77;
enum GL_PIXEL_MAP_B_TO_B = 0x0C78;
enum GL_PIXEL_MAP_A_TO_A = 0x0C79;
enum GL_CURRENT_COLOR = 0x0B00;
enum GL_CURRENT_INDEX = 0x0B01;
enum GL_CURRENT_NORMAL = 0x0B02;
enum GL_CURRENT_TEXTURE_COORDS = 0x0B03;
enum GL_CURRENT_RASTER_COLOR = 0x0B04;
enum GL_CURRENT_RASTER_INDEX = 0x0B05;
enum GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
enum GL_CURRENT_RASTER_POSITION = 0x0B07;
enum GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
enum GL_CURRENT_RASTER_DISTANCE = 0x0B09;
enum GL_POINT_SMOOTH = 0x0B10;
enum GL_LINE_STIPPLE = 0x0B24;
enum GL_LINE_STIPPLE_PATTERN = 0x0B25;
enum GL_LINE_STIPPLE_REPEAT = 0x0B26;
enum GL_LIST_MODE = 0x0B30;
enum GL_MAX_LIST_NESTING = 0x0B31;
enum GL_LIST_BASE = 0x0B32;
enum GL_LIST_INDEX = 0x0B33;
enum GL_POLYGON_STIPPLE = 0x0B42;
enum GL_EDGE_FLAG = 0x0B43;
enum GL_LIGHTING = 0x0B50;
enum GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
enum GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
enum GL_LIGHT_MODEL_AMBIENT = 0x0B53;
enum GL_SHADE_MODEL = 0x0B54;
enum GL_COLOR_MATERIAL_FACE = 0x0B55;
enum GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
enum GL_COLOR_MATERIAL = 0x0B57;
enum GL_FOG = 0x0B60;
enum GL_FOG_INDEX = 0x0B61;
enum GL_FOG_DENSITY = 0x0B62;
enum GL_FOG_START = 0x0B63;
enum GL_FOG_END = 0x0B64;
enum GL_FOG_MODE = 0x0B65;
enum GL_FOG_COLOR = 0x0B66;
enum GL_ACCUM_CLEAR_VALUE = 0x0B80;
enum GL_MATRIX_MODE = 0x0BA0;
enum GL_NORMALIZE = 0x0BA1;
enum GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
enum GL_PROJECTION_STACK_DEPTH = 0x0BA4;
enum GL_TEXTURE_STACK_DEPTH = 0x0BA5;
enum GL_MODELVIEW_MATRIX = 0x0BA6;
enum GL_PROJECTION_MATRIX = 0x0BA7;
enum GL_TEXTURE_MATRIX = 0x0BA8;
enum GL_ATTRIB_STACK_DEPTH = 0x0BB0;
enum GL_ALPHA_TEST = 0x0BC0;
enum GL_ALPHA_TEST_FUNC = 0x0BC1;
enum GL_ALPHA_TEST_REF = 0x0BC2;
enum GL_LOGIC_OP = 0x0BF1;
enum GL_AUX_BUFFERS = 0x0C00;
enum GL_INDEX_CLEAR_VALUE = 0x0C20;
enum GL_INDEX_WRITEMASK = 0x0C21;
enum GL_INDEX_MODE = 0x0C30;
enum GL_RGBA_MODE = 0x0C31;
enum GL_RENDER_MODE = 0x0C40;
enum GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
enum GL_POINT_SMOOTH_HINT = 0x0C51;
enum GL_FOG_HINT = 0x0C54;
enum GL_TEXTURE_GEN_S = 0x0C60;
enum GL_TEXTURE_GEN_T = 0x0C61;
enum GL_TEXTURE_GEN_R = 0x0C62;
enum GL_TEXTURE_GEN_Q = 0x0C63;
enum GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
enum GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
enum GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
enum GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
enum GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
enum GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
enum GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
enum GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
enum GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
enum GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
enum GL_MAP_COLOR = 0x0D10;
enum GL_MAP_STENCIL = 0x0D11;
enum GL_INDEX_SHIFT = 0x0D12;
enum GL_INDEX_OFFSET = 0x0D13;
enum GL_RED_SCALE = 0x0D14;
enum GL_RED_BIAS = 0x0D15;
enum GL_ZOOM_X = 0x0D16;
enum GL_ZOOM_Y = 0x0D17;
enum GL_GREEN_SCALE = 0x0D18;
enum GL_GREEN_BIAS = 0x0D19;
enum GL_BLUE_SCALE = 0x0D1A;
enum GL_BLUE_BIAS = 0x0D1B;
enum GL_ALPHA_SCALE = 0x0D1C;
enum GL_ALPHA_BIAS = 0x0D1D;
enum GL_DEPTH_SCALE = 0x0D1E;
enum GL_DEPTH_BIAS = 0x0D1F;
enum GL_MAX_EVAL_ORDER = 0x0D30;
enum GL_MAX_LIGHTS = 0x0D31;
enum GL_MAX_CLIP_PLANES = 0x0D32;
enum GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
enum GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
enum GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
enum GL_MAX_NAME_STACK_DEPTH = 0x0D37;
enum GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
enum GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
enum GL_INDEX_BITS = 0x0D51;
enum GL_RED_BITS = 0x0D52;
enum GL_GREEN_BITS = 0x0D53;
enum GL_BLUE_BITS = 0x0D54;
enum GL_ALPHA_BITS = 0x0D55;
enum GL_DEPTH_BITS = 0x0D56;
enum GL_STENCIL_BITS = 0x0D57;
enum GL_ACCUM_RED_BITS = 0x0D58;
enum GL_ACCUM_GREEN_BITS = 0x0D59;
enum GL_ACCUM_BLUE_BITS = 0x0D5A;
enum GL_ACCUM_ALPHA_BITS = 0x0D5B;
enum GL_NAME_STACK_DEPTH = 0x0D70;
enum GL_AUTO_NORMAL = 0x0D80;
enum GL_MAP1_COLOR_4 = 0x0D90;
enum GL_MAP1_INDEX = 0x0D91;
enum GL_MAP1_NORMAL = 0x0D92;
enum GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
enum GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
enum GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
enum GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
enum GL_MAP1_VERTEX_3 = 0x0D97;
enum GL_MAP1_VERTEX_4 = 0x0D98;
enum GL_MAP2_COLOR_4 = 0x0DB0;
enum GL_MAP2_INDEX = 0x0DB1;
enum GL_MAP2_NORMAL = 0x0DB2;
enum GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
enum GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
enum GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
enum GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
enum GL_MAP2_VERTEX_3 = 0x0DB7;
enum GL_MAP2_VERTEX_4 = 0x0DB8;
enum GL_MAP1_GRID_DOMAIN = 0x0DD0;
enum GL_MAP1_GRID_SEGMENTS = 0x0DD1;
enum GL_MAP2_GRID_DOMAIN = 0x0DD2;
enum GL_MAP2_GRID_SEGMENTS = 0x0DD3;
enum GL_TEXTURE_COMPONENTS = 0x1003;
enum GL_TEXTURE_BORDER = 0x1005;
enum GL_AMBIENT = 0x1200;
enum GL_DIFFUSE = 0x1201;
enum GL_SPECULAR = 0x1202;
enum GL_POSITION = 0x1203;
enum GL_SPOT_DIRECTION = 0x1204;
enum GL_SPOT_EXPONENT = 0x1205;
enum GL_SPOT_CUTOFF = 0x1206;
enum GL_CONSTANT_ATTENUATION = 0x1207;
enum GL_LINEAR_ATTENUATION = 0x1208;
enum GL_QUADRATIC_ATTENUATION = 0x1209;
enum GL_COMPILE = 0x1300;
enum GL_COMPILE_AND_EXECUTE = 0x1301;
enum GL_2_BYTES = 0x1407;
enum GL_3_BYTES = 0x1408;
enum GL_4_BYTES = 0x1409;
enum GL_EMISSION = 0x1600;
enum GL_SHININESS = 0x1601;
enum GL_AMBIENT_AND_DIFFUSE = 0x1602;
enum GL_COLOR_INDEXES = 0x1603;
enum GL_MODELVIEW = 0x1700;
enum GL_PROJECTION = 0x1701;
enum GL_COLOR_INDEX = 0x1900;
enum GL_LUMINANCE = 0x1909;
enum GL_LUMINANCE_ALPHA = 0x190A;
enum GL_BITMAP = 0x1A00;
enum GL_RENDER = 0x1C00;
enum GL_FEEDBACK = 0x1C01;
enum GL_SELECT = 0x1C02;
enum GL_FLAT = 0x1D00;
enum GL_SMOOTH = 0x1D01;
enum GL_S = 0x2000;
enum GL_T = 0x2001;
enum GL_R = 0x2002;
enum GL_Q = 0x2003;
enum GL_MODULATE = 0x2100;
enum GL_DECAL = 0x2101;
enum GL_TEXTURE_ENV_MODE = 0x2200;
enum GL_TEXTURE_ENV_COLOR = 0x2201;
enum GL_TEXTURE_ENV = 0x2300;
enum GL_EYE_LINEAR = 0x2400;
enum GL_OBJECT_LINEAR = 0x2401;
enum GL_SPHERE_MAP = 0x2402;
enum GL_TEXTURE_GEN_MODE = 0x2500;
enum GL_OBJECT_PLANE = 0x2501;
enum GL_EYE_PLANE = 0x2502;
enum GL_CLAMP = 0x2900;
enum GL_CLIP_PLANE0 = 0x3000;
enum GL_CLIP_PLANE1 = 0x3001;
enum GL_CLIP_PLANE2 = 0x3002;
enum GL_CLIP_PLANE3 = 0x3003;
enum GL_CLIP_PLANE4 = 0x3004;
enum GL_CLIP_PLANE5 = 0x3005;
enum GL_LIGHT0 = 0x4000;
enum GL_LIGHT1 = 0x4001;
enum GL_LIGHT2 = 0x4002;
enum GL_LIGHT3 = 0x4003;
enum GL_LIGHT4 = 0x4004;
enum GL_LIGHT5 = 0x4005;
enum GL_LIGHT6 = 0x4006;
enum GL_LIGHT7 = 0x4007;
enum GL_COLOR_LOGIC_OP = 0x0BF2;
enum GL_POLYGON_OFFSET_UNITS = 0x2A00;
enum GL_POLYGON_OFFSET_POINT = 0x2A01;
enum GL_POLYGON_OFFSET_LINE = 0x2A02;
enum GL_POLYGON_OFFSET_FILL = 0x8037;
enum GL_POLYGON_OFFSET_FACTOR = 0x8038;
enum GL_TEXTURE_BINDING_1D = 0x8068;
enum GL_TEXTURE_BINDING_2D = 0x8069;
enum GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
enum GL_TEXTURE_RED_SIZE = 0x805C;
enum GL_TEXTURE_GREEN_SIZE = 0x805D;
enum GL_TEXTURE_BLUE_SIZE = 0x805E;
enum GL_TEXTURE_ALPHA_SIZE = 0x805F;
enum GL_DOUBLE = 0x140A;
enum GL_PROXY_TEXTURE_1D = 0x8063;
enum GL_PROXY_TEXTURE_2D = 0x8064;
enum GL_R3_G3_B2 = 0x2A10;
enum GL_RGB4 = 0x804F;
enum GL_RGB5 = 0x8050;
enum GL_RGB8 = 0x8051;
enum GL_RGB10 = 0x8052;
enum GL_RGB12 = 0x8053;
enum GL_RGB16 = 0x8054;
enum GL_RGBA2 = 0x8055;
enum GL_RGBA4 = 0x8056;
enum GL_RGB5_A1 = 0x8057;
enum GL_RGBA8 = 0x8058;
enum GL_RGB10_A2 = 0x8059;
enum GL_RGBA12 = 0x805A;
enum GL_RGBA16 = 0x805B;
enum GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
enum GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
enum GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum GL_VERTEX_ARRAY_POINTER = 0x808E;
enum GL_NORMAL_ARRAY_POINTER = 0x808F;
enum GL_COLOR_ARRAY_POINTER = 0x8090;
enum GL_INDEX_ARRAY_POINTER = 0x8091;
enum GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
enum GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
enum GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
enum GL_SELECTION_BUFFER_POINTER = 0x0DF3;
enum GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
enum GL_INDEX_LOGIC_OP = 0x0BF1;
enum GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
enum GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
enum GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
enum GL_SELECTION_BUFFER_SIZE = 0x0DF4;
enum GL_VERTEX_ARRAY = 0x8074;
enum GL_NORMAL_ARRAY = 0x8075;
enum GL_COLOR_ARRAY = 0x8076;
enum GL_INDEX_ARRAY = 0x8077;
enum GL_TEXTURE_COORD_ARRAY = 0x8078;
enum GL_EDGE_FLAG_ARRAY = 0x8079;
enum GL_VERTEX_ARRAY_SIZE = 0x807A;
enum GL_VERTEX_ARRAY_TYPE = 0x807B;
enum GL_VERTEX_ARRAY_STRIDE = 0x807C;
enum GL_NORMAL_ARRAY_TYPE = 0x807E;
enum GL_NORMAL_ARRAY_STRIDE = 0x807F;
enum GL_COLOR_ARRAY_SIZE = 0x8081;
enum GL_COLOR_ARRAY_TYPE = 0x8082;
enum GL_COLOR_ARRAY_STRIDE = 0x8083;
enum GL_INDEX_ARRAY_TYPE = 0x8085;
enum GL_INDEX_ARRAY_STRIDE = 0x8086;
enum GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
enum GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
enum GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
enum GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
enum GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
enum GL_TEXTURE_INTENSITY_SIZE = 0x8061;
enum GL_TEXTURE_PRIORITY = 0x8066;
enum GL_TEXTURE_RESIDENT = 0x8067;
enum GL_ALPHA4 = 0x803B;
enum GL_ALPHA8 = 0x803C;
enum GL_ALPHA12 = 0x803D;
enum GL_ALPHA16 = 0x803E;
enum GL_LUMINANCE4 = 0x803F;
enum GL_LUMINANCE8 = 0x8040;
enum GL_LUMINANCE12 = 0x8041;
enum GL_LUMINANCE16 = 0x8042;
enum GL_LUMINANCE4_ALPHA4 = 0x8043;
enum GL_LUMINANCE6_ALPHA2 = 0x8044;
enum GL_LUMINANCE8_ALPHA8 = 0x8045;
enum GL_LUMINANCE12_ALPHA4 = 0x8046;
enum GL_LUMINANCE12_ALPHA12 = 0x8047;
enum GL_LUMINANCE16_ALPHA16 = 0x8048;
enum GL_INTENSITY = 0x8049;
enum GL_INTENSITY4 = 0x804A;
enum GL_INTENSITY8 = 0x804B;
enum GL_INTENSITY12 = 0x804C;
enum GL_INTENSITY16 = 0x804D;
enum GL_V2F = 0x2A20;
enum GL_V3F = 0x2A21;
enum GL_C4UB_V2F = 0x2A22;
enum GL_C4UB_V3F = 0x2A23;
enum GL_C3F_V3F = 0x2A24;
enum GL_N3F_V3F = 0x2A25;
enum GL_C4F_N3F_V3F = 0x2A26;
enum GL_T2F_V3F = 0x2A27;
enum GL_T4F_V4F = 0x2A28;
enum GL_T2F_C4UB_V3F = 0x2A29;
enum GL_T2F_C3F_V3F = 0x2A2A;
enum GL_T2F_N3F_V3F = 0x2A2B;
enum GL_T2F_C4F_N3F_V3F = 0x2A2C;
enum GL_T4F_C4F_N3F_V4F = 0x2A2D;
enum GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
enum GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
enum GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
enum GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
enum GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
enum GL_TEXTURE_BINDING_3D = 0x806A;
enum GL_PACK_SKIP_IMAGES = 0x806B;
enum GL_PACK_IMAGE_HEIGHT = 0x806C;
enum GL_UNPACK_SKIP_IMAGES = 0x806D;
enum GL_UNPACK_IMAGE_HEIGHT = 0x806E;
enum GL_TEXTURE_3D = 0x806F;
enum GL_PROXY_TEXTURE_3D = 0x8070;
enum GL_TEXTURE_DEPTH = 0x8071;
enum GL_TEXTURE_WRAP_R = 0x8072;
enum GL_MAX_3D_TEXTURE_SIZE = 0x8073;
enum GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
enum GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
enum GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
enum GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
enum GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
enum GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
enum GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
enum GL_BGR = 0x80E0;
enum GL_BGRA = 0x80E1;
enum GL_MAX_ELEMENTS_VERTICES = 0x80E8;
enum GL_MAX_ELEMENTS_INDICES = 0x80E9;
enum GL_CLAMP_TO_EDGE = 0x812F;
enum GL_TEXTURE_MIN_LOD = 0x813A;
enum GL_TEXTURE_MAX_LOD = 0x813B;
enum GL_TEXTURE_BASE_LEVEL = 0x813C;
enum GL_TEXTURE_MAX_LEVEL = 0x813D;
enum GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
enum GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
enum GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
enum GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
enum GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
enum GL_RESCALE_NORMAL = 0x803A;
enum GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
enum GL_SINGLE_COLOR = 0x81F9;
enum GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
enum GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
enum GL_TEXTURE0 = 0x84C0;
enum GL_TEXTURE1 = 0x84C1;
enum GL_TEXTURE2 = 0x84C2;
enum GL_TEXTURE3 = 0x84C3;
enum GL_TEXTURE4 = 0x84C4;
enum GL_TEXTURE5 = 0x84C5;
enum GL_TEXTURE6 = 0x84C6;
enum GL_TEXTURE7 = 0x84C7;
enum GL_TEXTURE8 = 0x84C8;
enum GL_TEXTURE9 = 0x84C9;
enum GL_TEXTURE10 = 0x84CA;
enum GL_TEXTURE11 = 0x84CB;
enum GL_TEXTURE12 = 0x84CC;
enum GL_TEXTURE13 = 0x84CD;
enum GL_TEXTURE14 = 0x84CE;
enum GL_TEXTURE15 = 0x84CF;
enum GL_TEXTURE16 = 0x84D0;
enum GL_TEXTURE17 = 0x84D1;
enum GL_TEXTURE18 = 0x84D2;
enum GL_TEXTURE19 = 0x84D3;
enum GL_TEXTURE20 = 0x84D4;
enum GL_TEXTURE21 = 0x84D5;
enum GL_TEXTURE22 = 0x84D6;
enum GL_TEXTURE23 = 0x84D7;
enum GL_TEXTURE24 = 0x84D8;
enum GL_TEXTURE25 = 0x84D9;
enum GL_TEXTURE26 = 0x84DA;
enum GL_TEXTURE27 = 0x84DB;
enum GL_TEXTURE28 = 0x84DC;
enum GL_TEXTURE29 = 0x84DD;
enum GL_TEXTURE30 = 0x84DE;
enum GL_TEXTURE31 = 0x84DF;
enum GL_ACTIVE_TEXTURE = 0x84E0;
enum GL_MULTISAMPLE = 0x809D;
enum GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
enum GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
enum GL_SAMPLE_COVERAGE = 0x80A0;
enum GL_SAMPLE_BUFFERS = 0x80A8;
enum GL_SAMPLES = 0x80A9;
enum GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
enum GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
enum GL_TEXTURE_CUBE_MAP = 0x8513;
enum GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
enum GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
enum GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
enum GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
enum GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
enum GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
enum GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
enum GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
enum GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
enum GL_COMPRESSED_RGB = 0x84ED;
enum GL_COMPRESSED_RGBA = 0x84EE;
enum GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
enum GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
enum GL_TEXTURE_COMPRESSED = 0x86A1;
enum GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
enum GL_CLAMP_TO_BORDER = 0x812D;
enum GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
enum GL_MAX_TEXTURE_UNITS = 0x84E2;
enum GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
enum GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
enum GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
enum GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
enum GL_MULTISAMPLE_BIT = 0x20000000;
enum GL_NORMAL_MAP = 0x8511;
enum GL_REFLECTION_MAP = 0x8512;
enum GL_COMPRESSED_ALPHA = 0x84E9;
enum GL_COMPRESSED_LUMINANCE = 0x84EA;
enum GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
enum GL_COMPRESSED_INTENSITY = 0x84EC;
enum GL_COMBINE = 0x8570;
enum GL_COMBINE_RGB = 0x8571;
enum GL_COMBINE_ALPHA = 0x8572;
enum GL_SOURCE0_RGB = 0x8580;
enum GL_SOURCE1_RGB = 0x8581;
enum GL_SOURCE2_RGB = 0x8582;
enum GL_SOURCE0_ALPHA = 0x8588;
enum GL_SOURCE1_ALPHA = 0x8589;
enum GL_SOURCE2_ALPHA = 0x858A;
enum GL_OPERAND0_RGB = 0x8590;
enum GL_OPERAND1_RGB = 0x8591;
enum GL_OPERAND2_RGB = 0x8592;
enum GL_OPERAND0_ALPHA = 0x8598;
enum GL_OPERAND1_ALPHA = 0x8599;
enum GL_OPERAND2_ALPHA = 0x859A;
enum GL_RGB_SCALE = 0x8573;
enum GL_ADD_SIGNED = 0x8574;
enum GL_INTERPOLATE = 0x8575;
enum GL_SUBTRACT = 0x84E7;
enum GL_CONSTANT = 0x8576;
enum GL_PRIMARY_COLOR = 0x8577;
enum GL_PREVIOUS = 0x8578;
enum GL_DOT3_RGB = 0x86AE;
enum GL_DOT3_RGBA = 0x86AF;
enum GL_BLEND_DST_RGB = 0x80C8;
enum GL_BLEND_SRC_RGB = 0x80C9;
enum GL_BLEND_DST_ALPHA = 0x80CA;
enum GL_BLEND_SRC_ALPHA = 0x80CB;
enum GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
enum GL_DEPTH_COMPONENT16 = 0x81A5;
enum GL_DEPTH_COMPONENT24 = 0x81A6;
enum GL_DEPTH_COMPONENT32 = 0x81A7;
enum GL_MIRRORED_REPEAT = 0x8370;
enum GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
enum GL_TEXTURE_LOD_BIAS = 0x8501;
enum GL_INCR_WRAP = 0x8507;
enum GL_DECR_WRAP = 0x8508;
enum GL_TEXTURE_DEPTH_SIZE = 0x884A;
enum GL_TEXTURE_COMPARE_MODE = 0x884C;
enum GL_TEXTURE_COMPARE_FUNC = 0x884D;
enum GL_POINT_SIZE_MIN = 0x8126;
enum GL_POINT_SIZE_MAX = 0x8127;
enum GL_POINT_DISTANCE_ATTENUATION = 0x8129;
enum GL_GENERATE_MIPMAP = 0x8191;
enum GL_GENERATE_MIPMAP_HINT = 0x8192;
enum GL_FOG_COORDINATE_SOURCE = 0x8450;
enum GL_FOG_COORDINATE = 0x8451;
enum GL_FRAGMENT_DEPTH = 0x8452;
enum GL_CURRENT_FOG_COORDINATE = 0x8453;
enum GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
enum GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
enum GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
enum GL_FOG_COORDINATE_ARRAY = 0x8457;
enum GL_COLOR_SUM = 0x8458;
enum GL_CURRENT_SECONDARY_COLOR = 0x8459;
enum GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
enum GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
enum GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
enum GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
enum GL_SECONDARY_COLOR_ARRAY = 0x845E;
enum GL_TEXTURE_FILTER_CONTROL = 0x8500;
enum GL_DEPTH_TEXTURE_MODE = 0x884B;
enum GL_COMPARE_R_TO_TEXTURE = 0x884E;
enum GL_BLEND_COLOR = 0x8005;
enum GL_BLEND_EQUATION = 0x8009;
enum GL_CONSTANT_COLOR = 0x8001;
enum GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
enum GL_CONSTANT_ALPHA = 0x8003;
enum GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
enum GL_FUNC_ADD = 0x8006;
enum GL_FUNC_REVERSE_SUBTRACT = 0x800B;
enum GL_FUNC_SUBTRACT = 0x800A;
enum GL_MIN = 0x8007;
enum GL_MAX = 0x8008;
enum GL_BUFFER_SIZE = 0x8764;
enum GL_BUFFER_USAGE = 0x8765;
enum GL_QUERY_COUNTER_BITS = 0x8864;
enum GL_CURRENT_QUERY = 0x8865;
enum GL_QUERY_RESULT = 0x8866;
enum GL_QUERY_RESULT_AVAILABLE = 0x8867;
enum GL_ARRAY_BUFFER = 0x8892;
enum GL_ELEMENT_ARRAY_BUFFER = 0x8893;
enum GL_ARRAY_BUFFER_BINDING = 0x8894;
enum GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
enum GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
enum GL_READ_ONLY = 0x88B8;
enum GL_WRITE_ONLY = 0x88B9;
enum GL_READ_WRITE = 0x88BA;
enum GL_BUFFER_ACCESS = 0x88BB;
enum GL_BUFFER_MAPPED = 0x88BC;
enum GL_BUFFER_MAP_POINTER = 0x88BD;
enum GL_STREAM_DRAW = 0x88E0;
enum GL_STREAM_READ = 0x88E1;
enum GL_STREAM_COPY = 0x88E2;
enum GL_STATIC_DRAW = 0x88E4;
enum GL_STATIC_READ = 0x88E5;
enum GL_STATIC_COPY = 0x88E6;
enum GL_DYNAMIC_DRAW = 0x88E8;
enum GL_DYNAMIC_READ = 0x88E9;
enum GL_DYNAMIC_COPY = 0x88EA;
enum GL_SAMPLES_PASSED = 0x8914;
enum GL_SRC1_ALPHA = 0x8589;
enum GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
enum GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
enum GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
enum GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
enum GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
enum GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
enum GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
enum GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
enum GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
enum GL_FOG_COORD_SRC = 0x8450;
enum GL_FOG_COORD = 0x8451;
enum GL_CURRENT_FOG_COORD = 0x8453;
enum GL_FOG_COORD_ARRAY_TYPE = 0x8454;
enum GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
enum GL_FOG_COORD_ARRAY_POINTER = 0x8456;
enum GL_FOG_COORD_ARRAY = 0x8457;
enum GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
enum GL_SRC0_RGB = 0x8580;
enum GL_SRC1_RGB = 0x8581;
enum GL_SRC2_RGB = 0x8582;
enum GL_SRC0_ALPHA = 0x8588;
enum GL_SRC2_ALPHA = 0x858A;
enum GL_BLEND_EQUATION_RGB = 0x8009;
enum GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
enum GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
enum GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
enum GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
enum GL_CURRENT_VERTEX_ATTRIB = 0x8626;
enum GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
enum GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
enum GL_STENCIL_BACK_FUNC = 0x8800;
enum GL_STENCIL_BACK_FAIL = 0x8801;
enum GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
enum GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
enum GL_MAX_DRAW_BUFFERS = 0x8824;
enum GL_DRAW_BUFFER0 = 0x8825;
enum GL_DRAW_BUFFER1 = 0x8826;
enum GL_DRAW_BUFFER2 = 0x8827;
enum GL_DRAW_BUFFER3 = 0x8828;
enum GL_DRAW_BUFFER4 = 0x8829;
enum GL_DRAW_BUFFER5 = 0x882A;
enum GL_DRAW_BUFFER6 = 0x882B;
enum GL_DRAW_BUFFER7 = 0x882C;
enum GL_DRAW_BUFFER8 = 0x882D;
enum GL_DRAW_BUFFER9 = 0x882E;
enum GL_DRAW_BUFFER10 = 0x882F;
enum GL_DRAW_BUFFER11 = 0x8830;
enum GL_DRAW_BUFFER12 = 0x8831;
enum GL_DRAW_BUFFER13 = 0x8832;
enum GL_DRAW_BUFFER14 = 0x8833;
enum GL_DRAW_BUFFER15 = 0x8834;
enum GL_BLEND_EQUATION_ALPHA = 0x883D;
enum GL_MAX_VERTEX_ATTRIBS = 0x8869;
enum GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
enum GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
enum GL_FRAGMENT_SHADER = 0x8B30;
enum GL_VERTEX_SHADER = 0x8B31;
enum GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
enum GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
enum GL_MAX_VARYING_FLOATS = 0x8B4B;
enum GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
enum GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
enum GL_SHADER_TYPE = 0x8B4F;
enum GL_FLOAT_VEC2 = 0x8B50;
enum GL_FLOAT_VEC3 = 0x8B51;
enum GL_FLOAT_VEC4 = 0x8B52;
enum GL_INT_VEC2 = 0x8B53;
enum GL_INT_VEC3 = 0x8B54;
enum GL_INT_VEC4 = 0x8B55;
enum GL_BOOL = 0x8B56;
enum GL_BOOL_VEC2 = 0x8B57;
enum GL_BOOL_VEC3 = 0x8B58;
enum GL_BOOL_VEC4 = 0x8B59;
enum GL_FLOAT_MAT2 = 0x8B5A;
enum GL_FLOAT_MAT3 = 0x8B5B;
enum GL_FLOAT_MAT4 = 0x8B5C;
enum GL_SAMPLER_1D = 0x8B5D;
enum GL_SAMPLER_2D = 0x8B5E;
enum GL_SAMPLER_3D = 0x8B5F;
enum GL_SAMPLER_CUBE = 0x8B60;
enum GL_SAMPLER_1D_SHADOW = 0x8B61;
enum GL_SAMPLER_2D_SHADOW = 0x8B62;
enum GL_DELETE_STATUS = 0x8B80;
enum GL_COMPILE_STATUS = 0x8B81;
enum GL_LINK_STATUS = 0x8B82;
enum GL_VALIDATE_STATUS = 0x8B83;
enum GL_INFO_LOG_LENGTH = 0x8B84;
enum GL_ATTACHED_SHADERS = 0x8B85;
enum GL_ACTIVE_UNIFORMS = 0x8B86;
enum GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
enum GL_SHADER_SOURCE_LENGTH = 0x8B88;
enum GL_ACTIVE_ATTRIBUTES = 0x8B89;
enum GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
enum GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
enum GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
enum GL_CURRENT_PROGRAM = 0x8B8D;
enum GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
enum GL_LOWER_LEFT = 0x8CA1;
enum GL_UPPER_LEFT = 0x8CA2;
enum GL_STENCIL_BACK_REF = 0x8CA3;
enum GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
enum GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
enum GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
enum GL_POINT_SPRITE = 0x8861;
enum GL_COORD_REPLACE = 0x8862;
enum GL_MAX_TEXTURE_COORDS = 0x8871;
enum GL_PIXEL_PACK_BUFFER = 0x88EB;
enum GL_PIXEL_UNPACK_BUFFER = 0x88EC;
enum GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
enum GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
enum GL_FLOAT_MAT2x3 = 0x8B65;
enum GL_FLOAT_MAT2x4 = 0x8B66;
enum GL_FLOAT_MAT3x2 = 0x8B67;
enum GL_FLOAT_MAT3x4 = 0x8B68;
enum GL_FLOAT_MAT4x2 = 0x8B69;
enum GL_FLOAT_MAT4x3 = 0x8B6A;
enum GL_SRGB = 0x8C40;
enum GL_SRGB8 = 0x8C41;
enum GL_SRGB_ALPHA = 0x8C42;
enum GL_SRGB8_ALPHA8 = 0x8C43;
enum GL_COMPRESSED_SRGB = 0x8C48;
enum GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
enum GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
enum GL_SLUMINANCE_ALPHA = 0x8C44;
enum GL_SLUMINANCE8_ALPHA8 = 0x8C45;
enum GL_SLUMINANCE = 0x8C46;
enum GL_SLUMINANCE8 = 0x8C47;
enum GL_COMPRESSED_SLUMINANCE = 0x8C4A;
enum GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
enum GL_COMPARE_REF_TO_TEXTURE = 0x884E;
enum GL_CLIP_DISTANCE0 = 0x3000;
enum GL_CLIP_DISTANCE1 = 0x3001;
enum GL_CLIP_DISTANCE2 = 0x3002;
enum GL_CLIP_DISTANCE3 = 0x3003;
enum GL_CLIP_DISTANCE4 = 0x3004;
enum GL_CLIP_DISTANCE5 = 0x3005;
enum GL_CLIP_DISTANCE6 = 0x3006;
enum GL_CLIP_DISTANCE7 = 0x3007;
enum GL_MAX_CLIP_DISTANCES = 0x0D32;
enum GL_MAJOR_VERSION = 0x821B;
enum GL_MINOR_VERSION = 0x821C;
enum GL_NUM_EXTENSIONS = 0x821D;
enum GL_CONTEXT_FLAGS = 0x821E;
enum GL_COMPRESSED_RED = 0x8225;
enum GL_COMPRESSED_RG = 0x8226;
enum GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
enum GL_RGBA32F = 0x8814;
enum GL_RGB32F = 0x8815;
enum GL_RGBA16F = 0x881A;
enum GL_RGB16F = 0x881B;
enum GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
enum GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
enum GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
enum GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
enum GL_CLAMP_READ_COLOR = 0x891C;
enum GL_FIXED_ONLY = 0x891D;
enum GL_MAX_VARYING_COMPONENTS = 0x8B4B;
enum GL_TEXTURE_1D_ARRAY = 0x8C18;
enum GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
enum GL_TEXTURE_2D_ARRAY = 0x8C1A;
enum GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
enum GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
enum GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
enum GL_R11F_G11F_B10F = 0x8C3A;
enum GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
enum GL_RGB9_E5 = 0x8C3D;
enum GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
enum GL_TEXTURE_SHARED_SIZE = 0x8C3F;
enum GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
enum GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
enum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
enum GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
enum GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
enum GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
enum GL_PRIMITIVES_GENERATED = 0x8C87;
enum GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
enum GL_RASTERIZER_DISCARD = 0x8C89;
enum GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
enum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
enum GL_INTERLEAVED_ATTRIBS = 0x8C8C;
enum GL_SEPARATE_ATTRIBS = 0x8C8D;
enum GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
enum GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
enum GL_RGBA32UI = 0x8D70;
enum GL_RGB32UI = 0x8D71;
enum GL_RGBA16UI = 0x8D76;
enum GL_RGB16UI = 0x8D77;
enum GL_RGBA8UI = 0x8D7C;
enum GL_RGB8UI = 0x8D7D;
enum GL_RGBA32I = 0x8D82;
enum GL_RGB32I = 0x8D83;
enum GL_RGBA16I = 0x8D88;
enum GL_RGB16I = 0x8D89;
enum GL_RGBA8I = 0x8D8E;
enum GL_RGB8I = 0x8D8F;
enum GL_RED_INTEGER = 0x8D94;
enum GL_GREEN_INTEGER = 0x8D95;
enum GL_BLUE_INTEGER = 0x8D96;
enum GL_RGB_INTEGER = 0x8D98;
enum GL_RGBA_INTEGER = 0x8D99;
enum GL_BGR_INTEGER = 0x8D9A;
enum GL_BGRA_INTEGER = 0x8D9B;
enum GL_SAMPLER_1D_ARRAY = 0x8DC0;
enum GL_SAMPLER_2D_ARRAY = 0x8DC1;
enum GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
enum GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
enum GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
enum GL_UNSIGNED_INT_VEC2 = 0x8DC6;
enum GL_UNSIGNED_INT_VEC3 = 0x8DC7;
enum GL_UNSIGNED_INT_VEC4 = 0x8DC8;
enum GL_INT_SAMPLER_1D = 0x8DC9;
enum GL_INT_SAMPLER_2D = 0x8DCA;
enum GL_INT_SAMPLER_3D = 0x8DCB;
enum GL_INT_SAMPLER_CUBE = 0x8DCC;
enum GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
enum GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
enum GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
enum GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
enum GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
enum GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
enum GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
enum GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
enum GL_QUERY_WAIT = 0x8E13;
enum GL_QUERY_NO_WAIT = 0x8E14;
enum GL_QUERY_BY_REGION_WAIT = 0x8E15;
enum GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
enum GL_BUFFER_ACCESS_FLAGS = 0x911F;
enum GL_BUFFER_MAP_LENGTH = 0x9120;
enum GL_BUFFER_MAP_OFFSET = 0x9121;
enum GL_DEPTH_COMPONENT32F = 0x8CAC;
enum GL_DEPTH32F_STENCIL8 = 0x8CAD;
enum GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
enum GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
enum GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
enum GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
enum GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
enum GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
enum GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
enum GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
enum GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
enum GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
enum GL_FRAMEBUFFER_DEFAULT = 0x8218;
enum GL_FRAMEBUFFER_UNDEFINED = 0x8219;
enum GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
enum GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
enum GL_DEPTH_STENCIL = 0x84F9;
enum GL_UNSIGNED_INT_24_8 = 0x84FA;
enum GL_DEPTH24_STENCIL8 = 0x88F0;
enum GL_TEXTURE_STENCIL_SIZE = 0x88F1;
enum GL_TEXTURE_RED_TYPE = 0x8C10;
enum GL_TEXTURE_GREEN_TYPE = 0x8C11;
enum GL_TEXTURE_BLUE_TYPE = 0x8C12;
enum GL_TEXTURE_ALPHA_TYPE = 0x8C13;
enum GL_TEXTURE_DEPTH_TYPE = 0x8C16;
enum GL_UNSIGNED_NORMALIZED = 0x8C17;
enum GL_FRAMEBUFFER_BINDING = 0x8CA6;
enum GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
enum GL_RENDERBUFFER_BINDING = 0x8CA7;
enum GL_READ_FRAMEBUFFER = 0x8CA8;
enum GL_DRAW_FRAMEBUFFER = 0x8CA9;
enum GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
enum GL_RENDERBUFFER_SAMPLES = 0x8CAB;
enum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
enum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
enum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
enum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
enum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
enum GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
enum GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
enum GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
enum GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
enum GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
enum GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
enum GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
enum GL_COLOR_ATTACHMENT0 = 0x8CE0;
enum GL_COLOR_ATTACHMENT1 = 0x8CE1;
enum GL_COLOR_ATTACHMENT2 = 0x8CE2;
enum GL_COLOR_ATTACHMENT3 = 0x8CE3;
enum GL_COLOR_ATTACHMENT4 = 0x8CE4;
enum GL_COLOR_ATTACHMENT5 = 0x8CE5;
enum GL_COLOR_ATTACHMENT6 = 0x8CE6;
enum GL_COLOR_ATTACHMENT7 = 0x8CE7;
enum GL_COLOR_ATTACHMENT8 = 0x8CE8;
enum GL_COLOR_ATTACHMENT9 = 0x8CE9;
enum GL_COLOR_ATTACHMENT10 = 0x8CEA;
enum GL_COLOR_ATTACHMENT11 = 0x8CEB;
enum GL_COLOR_ATTACHMENT12 = 0x8CEC;
enum GL_COLOR_ATTACHMENT13 = 0x8CED;
enum GL_COLOR_ATTACHMENT14 = 0x8CEE;
enum GL_COLOR_ATTACHMENT15 = 0x8CEF;
enum GL_COLOR_ATTACHMENT16 = 0x8CF0;
enum GL_COLOR_ATTACHMENT17 = 0x8CF1;
enum GL_COLOR_ATTACHMENT18 = 0x8CF2;
enum GL_COLOR_ATTACHMENT19 = 0x8CF3;
enum GL_COLOR_ATTACHMENT20 = 0x8CF4;
enum GL_COLOR_ATTACHMENT21 = 0x8CF5;
enum GL_COLOR_ATTACHMENT22 = 0x8CF6;
enum GL_COLOR_ATTACHMENT23 = 0x8CF7;
enum GL_COLOR_ATTACHMENT24 = 0x8CF8;
enum GL_COLOR_ATTACHMENT25 = 0x8CF9;
enum GL_COLOR_ATTACHMENT26 = 0x8CFA;
enum GL_COLOR_ATTACHMENT27 = 0x8CFB;
enum GL_COLOR_ATTACHMENT28 = 0x8CFC;
enum GL_COLOR_ATTACHMENT29 = 0x8CFD;
enum GL_COLOR_ATTACHMENT30 = 0x8CFE;
enum GL_COLOR_ATTACHMENT31 = 0x8CFF;
enum GL_DEPTH_ATTACHMENT = 0x8D00;
enum GL_STENCIL_ATTACHMENT = 0x8D20;
enum GL_FRAMEBUFFER = 0x8D40;
enum GL_RENDERBUFFER = 0x8D41;
enum GL_RENDERBUFFER_WIDTH = 0x8D42;
enum GL_RENDERBUFFER_HEIGHT = 0x8D43;
enum GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
enum GL_STENCIL_INDEX1 = 0x8D46;
enum GL_STENCIL_INDEX4 = 0x8D47;
enum GL_STENCIL_INDEX8 = 0x8D48;
enum GL_STENCIL_INDEX16 = 0x8D49;
enum GL_RENDERBUFFER_RED_SIZE = 0x8D50;
enum GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
enum GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
enum GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
enum GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
enum GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
enum GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
enum GL_MAX_SAMPLES = 0x8D57;
enum GL_INDEX = 0x8222;
enum GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
enum GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
enum GL_FRAMEBUFFER_SRGB = 0x8DB9;
enum GL_HALF_FLOAT = 0x140B;
enum GL_MAP_READ_BIT = 0x0001;
enum GL_MAP_WRITE_BIT = 0x0002;
enum GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
enum GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
enum GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
enum GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
enum GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
enum GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
enum GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
enum GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
enum GL_RG = 0x8227;
enum GL_RG_INTEGER = 0x8228;
enum GL_R8 = 0x8229;
enum GL_R16 = 0x822A;
enum GL_RG8 = 0x822B;
enum GL_RG16 = 0x822C;
enum GL_R16F = 0x822D;
enum GL_R32F = 0x822E;
enum GL_RG16F = 0x822F;
enum GL_RG32F = 0x8230;
enum GL_R8I = 0x8231;
enum GL_R8UI = 0x8232;
enum GL_R16I = 0x8233;
enum GL_R16UI = 0x8234;
enum GL_R32I = 0x8235;
enum GL_R32UI = 0x8236;
enum GL_RG8I = 0x8237;
enum GL_RG8UI = 0x8238;
enum GL_RG16I = 0x8239;
enum GL_RG16UI = 0x823A;
enum GL_RG32I = 0x823B;
enum GL_RG32UI = 0x823C;
enum GL_VERTEX_ARRAY_BINDING = 0x85B5;
enum GL_CLAMP_VERTEX_COLOR = 0x891A;
enum GL_CLAMP_FRAGMENT_COLOR = 0x891B;
enum GL_ALPHA_INTEGER = 0x8D97;
enum GL_SAMPLER_2D_RECT = 0x8B63;
enum GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
enum GL_SAMPLER_BUFFER = 0x8DC2;
enum GL_INT_SAMPLER_2D_RECT = 0x8DCD;
enum GL_INT_SAMPLER_BUFFER = 0x8DD0;
enum GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
enum GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
enum GL_TEXTURE_BUFFER = 0x8C2A;
enum GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
enum GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
enum GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
enum GL_TEXTURE_RECTANGLE = 0x84F5;
enum GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
enum GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
enum GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
enum GL_R8_SNORM = 0x8F94;
enum GL_RG8_SNORM = 0x8F95;
enum GL_RGB8_SNORM = 0x8F96;
enum GL_RGBA8_SNORM = 0x8F97;
enum GL_R16_SNORM = 0x8F98;
enum GL_RG16_SNORM = 0x8F99;
enum GL_RGB16_SNORM = 0x8F9A;
enum GL_RGBA16_SNORM = 0x8F9B;
enum GL_SIGNED_NORMALIZED = 0x8F9C;
enum GL_PRIMITIVE_RESTART = 0x8F9D;
enum GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
enum GL_COPY_READ_BUFFER = 0x8F36;
enum GL_COPY_WRITE_BUFFER = 0x8F37;
enum GL_UNIFORM_BUFFER = 0x8A11;
enum GL_UNIFORM_BUFFER_BINDING = 0x8A28;
enum GL_UNIFORM_BUFFER_START = 0x8A29;
enum GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
enum GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
enum GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
enum GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
enum GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
enum GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
enum GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
enum GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
enum GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
enum GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
enum GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
enum GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
enum GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
enum GL_UNIFORM_TYPE = 0x8A37;
enum GL_UNIFORM_SIZE = 0x8A38;
enum GL_UNIFORM_NAME_LENGTH = 0x8A39;
enum GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
enum GL_UNIFORM_OFFSET = 0x8A3B;
enum GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
enum GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
enum GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
enum GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
enum GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
enum GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
enum GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
enum GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
enum GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
enum GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
enum GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
enum GL_INVALID_INDEX = 0xFFFFFFFF;
enum GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
enum GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
enum GL_LINES_ADJACENCY = 0x000A;
enum GL_LINE_STRIP_ADJACENCY = 0x000B;
enum GL_TRIANGLES_ADJACENCY = 0x000C;
enum GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
enum GL_PROGRAM_POINT_SIZE = 0x8642;
enum GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
enum GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
enum GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
enum GL_GEOMETRY_SHADER = 0x8DD9;
enum GL_GEOMETRY_VERTICES_OUT = 0x8916;
enum GL_GEOMETRY_INPUT_TYPE = 0x8917;
enum GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
enum GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
enum GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
enum GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
enum GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
enum GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
enum GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
enum GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
enum GL_CONTEXT_PROFILE_MASK = 0x9126;
enum GL_DEPTH_CLAMP = 0x864F;
enum GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
enum GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
enum GL_LAST_VERTEX_CONVENTION = 0x8E4E;
enum GL_PROVOKING_VERTEX = 0x8E4F;
enum GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
enum GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
enum GL_OBJECT_TYPE = 0x9112;
enum GL_SYNC_CONDITION = 0x9113;
enum GL_SYNC_STATUS = 0x9114;
enum GL_SYNC_FLAGS = 0x9115;
enum GL_SYNC_FENCE = 0x9116;
enum GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
enum GL_UNSIGNALED = 0x9118;
enum GL_SIGNALED = 0x9119;
enum GL_ALREADY_SIGNALED = 0x911A;
enum GL_TIMEOUT_EXPIRED = 0x911B;
enum GL_CONDITION_SATISFIED = 0x911C;
enum GL_WAIT_FAILED = 0x911D;
enum GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
enum GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
enum GL_SAMPLE_POSITION = 0x8E50;
enum GL_SAMPLE_MASK = 0x8E51;
enum GL_SAMPLE_MASK_VALUE = 0x8E52;
enum GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
enum GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
enum GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
enum GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
enum GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
enum GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
enum GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
enum GL_TEXTURE_SAMPLES = 0x9106;
enum GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
enum GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
enum GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
enum GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
enum GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
enum GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
enum GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
enum GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
enum GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
enum GL_MAX_INTEGER_SAMPLES = 0x9110;

enum GL_VERSION_1_0 = 1;
extern __gshared int GLAD_GL_VERSION_1_0;
alias PFNGLCULLFACEPROC = void function (GLenum mode);
extern __gshared PFNGLCULLFACEPROC glad_glCullFace;
enum glCullFace = glad_glCullFace;
alias PFNGLFRONTFACEPROC = void function (GLenum mode);
extern __gshared PFNGLFRONTFACEPROC glad_glFrontFace;
enum glFrontFace = glad_glFrontFace;
alias PFNGLHINTPROC = void function (GLenum target, GLenum mode);
extern __gshared PFNGLHINTPROC glad_glHint;
enum glHint = glad_glHint;
alias PFNGLLINEWIDTHPROC = void function (GLfloat width);
extern __gshared PFNGLLINEWIDTHPROC glad_glLineWidth;
enum glLineWidth = glad_glLineWidth;
alias PFNGLPOINTSIZEPROC = void function (GLfloat size);
extern __gshared PFNGLPOINTSIZEPROC glad_glPointSize;
enum glPointSize = glad_glPointSize;
alias PFNGLPOLYGONMODEPROC = void function (GLenum face, GLenum mode);
extern __gshared PFNGLPOLYGONMODEPROC glad_glPolygonMode;
enum glPolygonMode = glad_glPolygonMode;
alias PFNGLSCISSORPROC = void function (GLint x, GLint y, GLsizei width, GLsizei height);
extern __gshared PFNGLSCISSORPROC glad_glScissor;
enum glScissor = glad_glScissor;
alias PFNGLTEXPARAMETERFPROC = void function (GLenum target, GLenum pname, GLfloat param);
extern __gshared PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
enum glTexParameterf = glad_glTexParameterf;
alias PFNGLTEXPARAMETERFVPROC = void function (GLenum target, GLenum pname, const(GLfloat)* params);
extern __gshared PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
enum glTexParameterfv = glad_glTexParameterfv;
alias PFNGLTEXPARAMETERIPROC = void function (GLenum target, GLenum pname, GLint param);
extern __gshared PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
enum glTexParameteri = glad_glTexParameteri;
alias PFNGLTEXPARAMETERIVPROC = void function (GLenum target, GLenum pname, const(GLint)* params);
extern __gshared PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
enum glTexParameteriv = glad_glTexParameteriv;
alias PFNGLTEXIMAGE1DPROC = void function (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const(void)* pixels);
extern __gshared PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
enum glTexImage1D = glad_glTexImage1D;
alias PFNGLTEXIMAGE2DPROC = void function (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(void)* pixels);
extern __gshared PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
enum glTexImage2D = glad_glTexImage2D;
alias PFNGLDRAWBUFFERPROC = void function (GLenum buf);
extern __gshared PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
enum glDrawBuffer = glad_glDrawBuffer;
alias PFNGLCLEARPROC = void function (GLbitfield mask);
extern __gshared PFNGLCLEARPROC glad_glClear;
enum glClear = glad_glClear;
alias PFNGLCLEARCOLORPROC = void function (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern __gshared PFNGLCLEARCOLORPROC glad_glClearColor;
enum glClearColor = glad_glClearColor;
alias PFNGLCLEARSTENCILPROC = void function (GLint s);
extern __gshared PFNGLCLEARSTENCILPROC glad_glClearStencil;
enum glClearStencil = glad_glClearStencil;
alias PFNGLCLEARDEPTHPROC = void function (GLdouble depth);
extern __gshared PFNGLCLEARDEPTHPROC glad_glClearDepth;
enum glClearDepth = glad_glClearDepth;
alias PFNGLSTENCILMASKPROC = void function (GLuint mask);
extern __gshared PFNGLSTENCILMASKPROC glad_glStencilMask;
enum glStencilMask = glad_glStencilMask;
alias PFNGLCOLORMASKPROC = void function (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern __gshared PFNGLCOLORMASKPROC glad_glColorMask;
enum glColorMask = glad_glColorMask;
alias PFNGLDEPTHMASKPROC = void function (GLboolean flag);
extern __gshared PFNGLDEPTHMASKPROC glad_glDepthMask;
enum glDepthMask = glad_glDepthMask;
alias PFNGLDISABLEPROC = void function (GLenum cap);
extern __gshared PFNGLDISABLEPROC glad_glDisable;
enum glDisable = glad_glDisable;
alias PFNGLENABLEPROC = void function (GLenum cap);
extern __gshared PFNGLENABLEPROC glad_glEnable;
enum glEnable = glad_glEnable;
alias PFNGLFINISHPROC = void function ();
extern __gshared PFNGLFINISHPROC glad_glFinish;
enum glFinish = glad_glFinish;
alias PFNGLFLUSHPROC = void function ();
extern __gshared PFNGLFLUSHPROC glad_glFlush;
enum glFlush = glad_glFlush;
alias PFNGLBLENDFUNCPROC = void function (GLenum sfactor, GLenum dfactor);
extern __gshared PFNGLBLENDFUNCPROC glad_glBlendFunc;
enum glBlendFunc = glad_glBlendFunc;
alias PFNGLLOGICOPPROC = void function (GLenum opcode);
extern __gshared PFNGLLOGICOPPROC glad_glLogicOp;
enum glLogicOp = glad_glLogicOp;
alias PFNGLSTENCILFUNCPROC = void function (GLenum func, GLint ref_, GLuint mask);
extern __gshared PFNGLSTENCILFUNCPROC glad_glStencilFunc;
enum glStencilFunc = glad_glStencilFunc;
alias PFNGLSTENCILOPPROC = void function (GLenum fail, GLenum zfail, GLenum zpass);
extern __gshared PFNGLSTENCILOPPROC glad_glStencilOp;
enum glStencilOp = glad_glStencilOp;
alias PFNGLDEPTHFUNCPROC = void function (GLenum func);
extern __gshared PFNGLDEPTHFUNCPROC glad_glDepthFunc;
enum glDepthFunc = glad_glDepthFunc;
alias PFNGLPIXELSTOREFPROC = void function (GLenum pname, GLfloat param);
extern __gshared PFNGLPIXELSTOREFPROC glad_glPixelStoref;
enum glPixelStoref = glad_glPixelStoref;
alias PFNGLPIXELSTOREIPROC = void function (GLenum pname, GLint param);
extern __gshared PFNGLPIXELSTOREIPROC glad_glPixelStorei;
enum glPixelStorei = glad_glPixelStorei;
alias PFNGLREADBUFFERPROC = void function (GLenum src);
extern __gshared PFNGLREADBUFFERPROC glad_glReadBuffer;
enum glReadBuffer = glad_glReadBuffer;
alias PFNGLREADPIXELSPROC = void function (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
extern __gshared PFNGLREADPIXELSPROC glad_glReadPixels;
enum glReadPixels = glad_glReadPixels;
alias PFNGLGETBOOLEANVPROC = void function (GLenum pname, GLboolean* data);
extern __gshared PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
enum glGetBooleanv = glad_glGetBooleanv;
alias PFNGLGETDOUBLEVPROC = void function (GLenum pname, GLdouble* data);
extern __gshared PFNGLGETDOUBLEVPROC glad_glGetDoublev;
enum glGetDoublev = glad_glGetDoublev;
alias PFNGLGETERRORPROC = uint function ();
extern __gshared PFNGLGETERRORPROC glad_glGetError;
enum glGetError = glad_glGetError;
alias PFNGLGETFLOATVPROC = void function (GLenum pname, GLfloat* data);
extern __gshared PFNGLGETFLOATVPROC glad_glGetFloatv;
enum glGetFloatv = glad_glGetFloatv;
alias PFNGLGETINTEGERVPROC = void function (GLenum pname, GLint* data);
extern __gshared PFNGLGETINTEGERVPROC glad_glGetIntegerv;
enum glGetIntegerv = glad_glGetIntegerv;
alias PFNGLGETSTRINGPROC = const(ubyte)* function (GLenum name);
extern __gshared PFNGLGETSTRINGPROC glad_glGetString;
enum glGetString = glad_glGetString;
alias PFNGLGETTEXIMAGEPROC = void function (GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
extern __gshared PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
enum glGetTexImage = glad_glGetTexImage;
alias PFNGLGETTEXPARAMETERFVPROC = void function (GLenum target, GLenum pname, GLfloat* params);
extern __gshared PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
enum glGetTexParameterfv = glad_glGetTexParameterfv;
alias PFNGLGETTEXPARAMETERIVPROC = void function (GLenum target, GLenum pname, GLint* params);
extern __gshared PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
enum glGetTexParameteriv = glad_glGetTexParameteriv;
alias PFNGLGETTEXLEVELPARAMETERFVPROC = void function (GLenum target, GLint level, GLenum pname, GLfloat* params);
extern __gshared PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
enum glGetTexLevelParameterfv = glad_glGetTexLevelParameterfv;
alias PFNGLGETTEXLEVELPARAMETERIVPROC = void function (GLenum target, GLint level, GLenum pname, GLint* params);
extern __gshared PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
enum glGetTexLevelParameteriv = glad_glGetTexLevelParameteriv;
alias PFNGLISENABLEDPROC = ubyte function (GLenum cap);
extern __gshared PFNGLISENABLEDPROC glad_glIsEnabled;
enum glIsEnabled = glad_glIsEnabled;
alias PFNGLDEPTHRANGEPROC = void function (GLdouble n, GLdouble f);
extern __gshared PFNGLDEPTHRANGEPROC glad_glDepthRange;
enum glDepthRange = glad_glDepthRange;
alias PFNGLVIEWPORTPROC = void function (GLint x, GLint y, GLsizei width, GLsizei height);
extern __gshared PFNGLVIEWPORTPROC glad_glViewport;
enum glViewport = glad_glViewport;
alias PFNGLNEWLISTPROC = void function (GLuint list, GLenum mode);
extern __gshared PFNGLNEWLISTPROC glad_glNewList;
enum glNewList = glad_glNewList;
alias PFNGLENDLISTPROC = void function ();
extern __gshared PFNGLENDLISTPROC glad_glEndList;
enum glEndList = glad_glEndList;
alias PFNGLCALLLISTPROC = void function (GLuint list);
extern __gshared PFNGLCALLLISTPROC glad_glCallList;
enum glCallList = glad_glCallList;
alias PFNGLCALLLISTSPROC = void function (GLsizei n, GLenum type, const(void)* lists);
extern __gshared PFNGLCALLLISTSPROC glad_glCallLists;
enum glCallLists = glad_glCallLists;
alias PFNGLDELETELISTSPROC = void function (GLuint list, GLsizei range);
extern __gshared PFNGLDELETELISTSPROC glad_glDeleteLists;
enum glDeleteLists = glad_glDeleteLists;
alias PFNGLGENLISTSPROC = uint function (GLsizei range);
extern __gshared PFNGLGENLISTSPROC glad_glGenLists;
enum glGenLists = glad_glGenLists;
alias PFNGLLISTBASEPROC = void function (GLuint base);
extern __gshared PFNGLLISTBASEPROC glad_glListBase;
enum glListBase = glad_glListBase;
alias PFNGLBEGINPROC = void function (GLenum mode);
extern __gshared PFNGLBEGINPROC glad_glBegin;
enum glBegin = glad_glBegin;
alias PFNGLBITMAPPROC = void function (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const(GLubyte)* bitmap);
extern __gshared PFNGLBITMAPPROC glad_glBitmap;
enum glBitmap = glad_glBitmap;
alias PFNGLCOLOR3BPROC = void function (GLbyte red, GLbyte green, GLbyte blue);
extern __gshared PFNGLCOLOR3BPROC glad_glColor3b;
enum glColor3b = glad_glColor3b;
alias PFNGLCOLOR3BVPROC = void function (const(GLbyte)* v);
extern __gshared PFNGLCOLOR3BVPROC glad_glColor3bv;
enum glColor3bv = glad_glColor3bv;
alias PFNGLCOLOR3DPROC = void function (GLdouble red, GLdouble green, GLdouble blue);
extern __gshared PFNGLCOLOR3DPROC glad_glColor3d;
enum glColor3d = glad_glColor3d;
alias PFNGLCOLOR3DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLCOLOR3DVPROC glad_glColor3dv;
enum glColor3dv = glad_glColor3dv;
alias PFNGLCOLOR3FPROC = void function (GLfloat red, GLfloat green, GLfloat blue);
extern __gshared PFNGLCOLOR3FPROC glad_glColor3f;
enum glColor3f = glad_glColor3f;
alias PFNGLCOLOR3FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLCOLOR3FVPROC glad_glColor3fv;
enum glColor3fv = glad_glColor3fv;
alias PFNGLCOLOR3IPROC = void function (GLint red, GLint green, GLint blue);
extern __gshared PFNGLCOLOR3IPROC glad_glColor3i;
enum glColor3i = glad_glColor3i;
alias PFNGLCOLOR3IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLCOLOR3IVPROC glad_glColor3iv;
enum glColor3iv = glad_glColor3iv;
alias PFNGLCOLOR3SPROC = void function (GLshort red, GLshort green, GLshort blue);
extern __gshared PFNGLCOLOR3SPROC glad_glColor3s;
enum glColor3s = glad_glColor3s;
alias PFNGLCOLOR3SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLCOLOR3SVPROC glad_glColor3sv;
enum glColor3sv = glad_glColor3sv;
alias PFNGLCOLOR3UBPROC = void function (GLubyte red, GLubyte green, GLubyte blue);
extern __gshared PFNGLCOLOR3UBPROC glad_glColor3ub;
enum glColor3ub = glad_glColor3ub;
alias PFNGLCOLOR3UBVPROC = void function (const(GLubyte)* v);
extern __gshared PFNGLCOLOR3UBVPROC glad_glColor3ubv;
enum glColor3ubv = glad_glColor3ubv;
alias PFNGLCOLOR3UIPROC = void function (GLuint red, GLuint green, GLuint blue);
extern __gshared PFNGLCOLOR3UIPROC glad_glColor3ui;
enum glColor3ui = glad_glColor3ui;
alias PFNGLCOLOR3UIVPROC = void function (const(GLuint)* v);
extern __gshared PFNGLCOLOR3UIVPROC glad_glColor3uiv;
enum glColor3uiv = glad_glColor3uiv;
alias PFNGLCOLOR3USPROC = void function (GLushort red, GLushort green, GLushort blue);
extern __gshared PFNGLCOLOR3USPROC glad_glColor3us;
enum glColor3us = glad_glColor3us;
alias PFNGLCOLOR3USVPROC = void function (const(GLushort)* v);
extern __gshared PFNGLCOLOR3USVPROC glad_glColor3usv;
enum glColor3usv = glad_glColor3usv;
alias PFNGLCOLOR4BPROC = void function (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
extern __gshared PFNGLCOLOR4BPROC glad_glColor4b;
enum glColor4b = glad_glColor4b;
alias PFNGLCOLOR4BVPROC = void function (const(GLbyte)* v);
extern __gshared PFNGLCOLOR4BVPROC glad_glColor4bv;
enum glColor4bv = glad_glColor4bv;
alias PFNGLCOLOR4DPROC = void function (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
extern __gshared PFNGLCOLOR4DPROC glad_glColor4d;
enum glColor4d = glad_glColor4d;
alias PFNGLCOLOR4DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLCOLOR4DVPROC glad_glColor4dv;
enum glColor4dv = glad_glColor4dv;
alias PFNGLCOLOR4FPROC = void function (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern __gshared PFNGLCOLOR4FPROC glad_glColor4f;
enum glColor4f = glad_glColor4f;
alias PFNGLCOLOR4FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLCOLOR4FVPROC glad_glColor4fv;
enum glColor4fv = glad_glColor4fv;
alias PFNGLCOLOR4IPROC = void function (GLint red, GLint green, GLint blue, GLint alpha);
extern __gshared PFNGLCOLOR4IPROC glad_glColor4i;
enum glColor4i = glad_glColor4i;
alias PFNGLCOLOR4IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLCOLOR4IVPROC glad_glColor4iv;
enum glColor4iv = glad_glColor4iv;
alias PFNGLCOLOR4SPROC = void function (GLshort red, GLshort green, GLshort blue, GLshort alpha);
extern __gshared PFNGLCOLOR4SPROC glad_glColor4s;
enum glColor4s = glad_glColor4s;
alias PFNGLCOLOR4SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLCOLOR4SVPROC glad_glColor4sv;
enum glColor4sv = glad_glColor4sv;
alias PFNGLCOLOR4UBPROC = void function (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
extern __gshared PFNGLCOLOR4UBPROC glad_glColor4ub;
enum glColor4ub = glad_glColor4ub;
alias PFNGLCOLOR4UBVPROC = void function (const(GLubyte)* v);
extern __gshared PFNGLCOLOR4UBVPROC glad_glColor4ubv;
enum glColor4ubv = glad_glColor4ubv;
alias PFNGLCOLOR4UIPROC = void function (GLuint red, GLuint green, GLuint blue, GLuint alpha);
extern __gshared PFNGLCOLOR4UIPROC glad_glColor4ui;
enum glColor4ui = glad_glColor4ui;
alias PFNGLCOLOR4UIVPROC = void function (const(GLuint)* v);
extern __gshared PFNGLCOLOR4UIVPROC glad_glColor4uiv;
enum glColor4uiv = glad_glColor4uiv;
alias PFNGLCOLOR4USPROC = void function (GLushort red, GLushort green, GLushort blue, GLushort alpha);
extern __gshared PFNGLCOLOR4USPROC glad_glColor4us;
enum glColor4us = glad_glColor4us;
alias PFNGLCOLOR4USVPROC = void function (const(GLushort)* v);
extern __gshared PFNGLCOLOR4USVPROC glad_glColor4usv;
enum glColor4usv = glad_glColor4usv;
alias PFNGLEDGEFLAGPROC = void function (GLboolean flag);
extern __gshared PFNGLEDGEFLAGPROC glad_glEdgeFlag;
enum glEdgeFlag = glad_glEdgeFlag;
alias PFNGLEDGEFLAGVPROC = void function (const(GLboolean)* flag);
extern __gshared PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;
enum glEdgeFlagv = glad_glEdgeFlagv;
alias PFNGLENDPROC = void function ();
extern __gshared PFNGLENDPROC glad_glEnd;
enum glEnd = glad_glEnd;
alias PFNGLINDEXDPROC = void function (GLdouble c);
extern __gshared PFNGLINDEXDPROC glad_glIndexd;
enum glIndexd = glad_glIndexd;
alias PFNGLINDEXDVPROC = void function (const(GLdouble)* c);
extern __gshared PFNGLINDEXDVPROC glad_glIndexdv;
enum glIndexdv = glad_glIndexdv;
alias PFNGLINDEXFPROC = void function (GLfloat c);
extern __gshared PFNGLINDEXFPROC glad_glIndexf;
enum glIndexf = glad_glIndexf;
alias PFNGLINDEXFVPROC = void function (const(GLfloat)* c);
extern __gshared PFNGLINDEXFVPROC glad_glIndexfv;
enum glIndexfv = glad_glIndexfv;
alias PFNGLINDEXIPROC = void function (GLint c);
extern __gshared PFNGLINDEXIPROC glad_glIndexi;
enum glIndexi = glad_glIndexi;
alias PFNGLINDEXIVPROC = void function (const(GLint)* c);
extern __gshared PFNGLINDEXIVPROC glad_glIndexiv;
enum glIndexiv = glad_glIndexiv;
alias PFNGLINDEXSPROC = void function (GLshort c);
extern __gshared PFNGLINDEXSPROC glad_glIndexs;
enum glIndexs = glad_glIndexs;
alias PFNGLINDEXSVPROC = void function (const(GLshort)* c);
extern __gshared PFNGLINDEXSVPROC glad_glIndexsv;
enum glIndexsv = glad_glIndexsv;
alias PFNGLNORMAL3BPROC = void function (GLbyte nx, GLbyte ny, GLbyte nz);
extern __gshared PFNGLNORMAL3BPROC glad_glNormal3b;
enum glNormal3b = glad_glNormal3b;
alias PFNGLNORMAL3BVPROC = void function (const(GLbyte)* v);
extern __gshared PFNGLNORMAL3BVPROC glad_glNormal3bv;
enum glNormal3bv = glad_glNormal3bv;
alias PFNGLNORMAL3DPROC = void function (GLdouble nx, GLdouble ny, GLdouble nz);
extern __gshared PFNGLNORMAL3DPROC glad_glNormal3d;
enum glNormal3d = glad_glNormal3d;
alias PFNGLNORMAL3DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLNORMAL3DVPROC glad_glNormal3dv;
enum glNormal3dv = glad_glNormal3dv;
alias PFNGLNORMAL3FPROC = void function (GLfloat nx, GLfloat ny, GLfloat nz);
extern __gshared PFNGLNORMAL3FPROC glad_glNormal3f;
enum glNormal3f = glad_glNormal3f;
alias PFNGLNORMAL3FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLNORMAL3FVPROC glad_glNormal3fv;
enum glNormal3fv = glad_glNormal3fv;
alias PFNGLNORMAL3IPROC = void function (GLint nx, GLint ny, GLint nz);
extern __gshared PFNGLNORMAL3IPROC glad_glNormal3i;
enum glNormal3i = glad_glNormal3i;
alias PFNGLNORMAL3IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLNORMAL3IVPROC glad_glNormal3iv;
enum glNormal3iv = glad_glNormal3iv;
alias PFNGLNORMAL3SPROC = void function (GLshort nx, GLshort ny, GLshort nz);
extern __gshared PFNGLNORMAL3SPROC glad_glNormal3s;
enum glNormal3s = glad_glNormal3s;
alias PFNGLNORMAL3SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLNORMAL3SVPROC glad_glNormal3sv;
enum glNormal3sv = glad_glNormal3sv;
alias PFNGLRASTERPOS2DPROC = void function (GLdouble x, GLdouble y);
extern __gshared PFNGLRASTERPOS2DPROC glad_glRasterPos2d;
enum glRasterPos2d = glad_glRasterPos2d;
alias PFNGLRASTERPOS2DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;
enum glRasterPos2dv = glad_glRasterPos2dv;
alias PFNGLRASTERPOS2FPROC = void function (GLfloat x, GLfloat y);
extern __gshared PFNGLRASTERPOS2FPROC glad_glRasterPos2f;
enum glRasterPos2f = glad_glRasterPos2f;
alias PFNGLRASTERPOS2FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;
enum glRasterPos2fv = glad_glRasterPos2fv;
alias PFNGLRASTERPOS2IPROC = void function (GLint x, GLint y);
extern __gshared PFNGLRASTERPOS2IPROC glad_glRasterPos2i;
enum glRasterPos2i = glad_glRasterPos2i;
alias PFNGLRASTERPOS2IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;
enum glRasterPos2iv = glad_glRasterPos2iv;
alias PFNGLRASTERPOS2SPROC = void function (GLshort x, GLshort y);
extern __gshared PFNGLRASTERPOS2SPROC glad_glRasterPos2s;
enum glRasterPos2s = glad_glRasterPos2s;
alias PFNGLRASTERPOS2SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;
enum glRasterPos2sv = glad_glRasterPos2sv;
alias PFNGLRASTERPOS3DPROC = void function (GLdouble x, GLdouble y, GLdouble z);
extern __gshared PFNGLRASTERPOS3DPROC glad_glRasterPos3d;
enum glRasterPos3d = glad_glRasterPos3d;
alias PFNGLRASTERPOS3DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;
enum glRasterPos3dv = glad_glRasterPos3dv;
alias PFNGLRASTERPOS3FPROC = void function (GLfloat x, GLfloat y, GLfloat z);
extern __gshared PFNGLRASTERPOS3FPROC glad_glRasterPos3f;
enum glRasterPos3f = glad_glRasterPos3f;
alias PFNGLRASTERPOS3FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;
enum glRasterPos3fv = glad_glRasterPos3fv;
alias PFNGLRASTERPOS3IPROC = void function (GLint x, GLint y, GLint z);
extern __gshared PFNGLRASTERPOS3IPROC glad_glRasterPos3i;
enum glRasterPos3i = glad_glRasterPos3i;
alias PFNGLRASTERPOS3IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;
enum glRasterPos3iv = glad_glRasterPos3iv;
alias PFNGLRASTERPOS3SPROC = void function (GLshort x, GLshort y, GLshort z);
extern __gshared PFNGLRASTERPOS3SPROC glad_glRasterPos3s;
enum glRasterPos3s = glad_glRasterPos3s;
alias PFNGLRASTERPOS3SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;
enum glRasterPos3sv = glad_glRasterPos3sv;
alias PFNGLRASTERPOS4DPROC = void function (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern __gshared PFNGLRASTERPOS4DPROC glad_glRasterPos4d;
enum glRasterPos4d = glad_glRasterPos4d;
alias PFNGLRASTERPOS4DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;
enum glRasterPos4dv = glad_glRasterPos4dv;
alias PFNGLRASTERPOS4FPROC = void function (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern __gshared PFNGLRASTERPOS4FPROC glad_glRasterPos4f;
enum glRasterPos4f = glad_glRasterPos4f;
alias PFNGLRASTERPOS4FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;
enum glRasterPos4fv = glad_glRasterPos4fv;
alias PFNGLRASTERPOS4IPROC = void function (GLint x, GLint y, GLint z, GLint w);
extern __gshared PFNGLRASTERPOS4IPROC glad_glRasterPos4i;
enum glRasterPos4i = glad_glRasterPos4i;
alias PFNGLRASTERPOS4IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;
enum glRasterPos4iv = glad_glRasterPos4iv;
alias PFNGLRASTERPOS4SPROC = void function (GLshort x, GLshort y, GLshort z, GLshort w);
extern __gshared PFNGLRASTERPOS4SPROC glad_glRasterPos4s;
enum glRasterPos4s = glad_glRasterPos4s;
alias PFNGLRASTERPOS4SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;
enum glRasterPos4sv = glad_glRasterPos4sv;
alias PFNGLRECTDPROC = void function (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
extern __gshared PFNGLRECTDPROC glad_glRectd;
enum glRectd = glad_glRectd;
alias PFNGLRECTDVPROC = void function (const(GLdouble)* v1, const(GLdouble)* v2);
extern __gshared PFNGLRECTDVPROC glad_glRectdv;
enum glRectdv = glad_glRectdv;
alias PFNGLRECTFPROC = void function (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
extern __gshared PFNGLRECTFPROC glad_glRectf;
enum glRectf = glad_glRectf;
alias PFNGLRECTFVPROC = void function (const(GLfloat)* v1, const(GLfloat)* v2);
extern __gshared PFNGLRECTFVPROC glad_glRectfv;
enum glRectfv = glad_glRectfv;
alias PFNGLRECTIPROC = void function (GLint x1, GLint y1, GLint x2, GLint y2);
extern __gshared PFNGLRECTIPROC glad_glRecti;
enum glRecti = glad_glRecti;
alias PFNGLRECTIVPROC = void function (const(GLint)* v1, const(GLint)* v2);
extern __gshared PFNGLRECTIVPROC glad_glRectiv;
enum glRectiv = glad_glRectiv;
alias PFNGLRECTSPROC = void function (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
extern __gshared PFNGLRECTSPROC glad_glRects;
enum glRects = glad_glRects;
alias PFNGLRECTSVPROC = void function (const(GLshort)* v1, const(GLshort)* v2);
extern __gshared PFNGLRECTSVPROC glad_glRectsv;
enum glRectsv = glad_glRectsv;
alias PFNGLTEXCOORD1DPROC = void function (GLdouble s);
extern __gshared PFNGLTEXCOORD1DPROC glad_glTexCoord1d;
enum glTexCoord1d = glad_glTexCoord1d;
alias PFNGLTEXCOORD1DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;
enum glTexCoord1dv = glad_glTexCoord1dv;
alias PFNGLTEXCOORD1FPROC = void function (GLfloat s);
extern __gshared PFNGLTEXCOORD1FPROC glad_glTexCoord1f;
enum glTexCoord1f = glad_glTexCoord1f;
alias PFNGLTEXCOORD1FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;
enum glTexCoord1fv = glad_glTexCoord1fv;
alias PFNGLTEXCOORD1IPROC = void function (GLint s);
extern __gshared PFNGLTEXCOORD1IPROC glad_glTexCoord1i;
enum glTexCoord1i = glad_glTexCoord1i;
alias PFNGLTEXCOORD1IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;
enum glTexCoord1iv = glad_glTexCoord1iv;
alias PFNGLTEXCOORD1SPROC = void function (GLshort s);
extern __gshared PFNGLTEXCOORD1SPROC glad_glTexCoord1s;
enum glTexCoord1s = glad_glTexCoord1s;
alias PFNGLTEXCOORD1SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;
enum glTexCoord1sv = glad_glTexCoord1sv;
alias PFNGLTEXCOORD2DPROC = void function (GLdouble s, GLdouble t);
extern __gshared PFNGLTEXCOORD2DPROC glad_glTexCoord2d;
enum glTexCoord2d = glad_glTexCoord2d;
alias PFNGLTEXCOORD2DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;
enum glTexCoord2dv = glad_glTexCoord2dv;
alias PFNGLTEXCOORD2FPROC = void function (GLfloat s, GLfloat t);
extern __gshared PFNGLTEXCOORD2FPROC glad_glTexCoord2f;
enum glTexCoord2f = glad_glTexCoord2f;
alias PFNGLTEXCOORD2FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;
enum glTexCoord2fv = glad_glTexCoord2fv;
alias PFNGLTEXCOORD2IPROC = void function (GLint s, GLint t);
extern __gshared PFNGLTEXCOORD2IPROC glad_glTexCoord2i;
enum glTexCoord2i = glad_glTexCoord2i;
alias PFNGLTEXCOORD2IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;
enum glTexCoord2iv = glad_glTexCoord2iv;
alias PFNGLTEXCOORD2SPROC = void function (GLshort s, GLshort t);
extern __gshared PFNGLTEXCOORD2SPROC glad_glTexCoord2s;
enum glTexCoord2s = glad_glTexCoord2s;
alias PFNGLTEXCOORD2SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;
enum glTexCoord2sv = glad_glTexCoord2sv;
alias PFNGLTEXCOORD3DPROC = void function (GLdouble s, GLdouble t, GLdouble r);
extern __gshared PFNGLTEXCOORD3DPROC glad_glTexCoord3d;
enum glTexCoord3d = glad_glTexCoord3d;
alias PFNGLTEXCOORD3DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;
enum glTexCoord3dv = glad_glTexCoord3dv;
alias PFNGLTEXCOORD3FPROC = void function (GLfloat s, GLfloat t, GLfloat r);
extern __gshared PFNGLTEXCOORD3FPROC glad_glTexCoord3f;
enum glTexCoord3f = glad_glTexCoord3f;
alias PFNGLTEXCOORD3FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;
enum glTexCoord3fv = glad_glTexCoord3fv;
alias PFNGLTEXCOORD3IPROC = void function (GLint s, GLint t, GLint r);
extern __gshared PFNGLTEXCOORD3IPROC glad_glTexCoord3i;
enum glTexCoord3i = glad_glTexCoord3i;
alias PFNGLTEXCOORD3IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;
enum glTexCoord3iv = glad_glTexCoord3iv;
alias PFNGLTEXCOORD3SPROC = void function (GLshort s, GLshort t, GLshort r);
extern __gshared PFNGLTEXCOORD3SPROC glad_glTexCoord3s;
enum glTexCoord3s = glad_glTexCoord3s;
alias PFNGLTEXCOORD3SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;
enum glTexCoord3sv = glad_glTexCoord3sv;
alias PFNGLTEXCOORD4DPROC = void function (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern __gshared PFNGLTEXCOORD4DPROC glad_glTexCoord4d;
enum glTexCoord4d = glad_glTexCoord4d;
alias PFNGLTEXCOORD4DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;
enum glTexCoord4dv = glad_glTexCoord4dv;
alias PFNGLTEXCOORD4FPROC = void function (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern __gshared PFNGLTEXCOORD4FPROC glad_glTexCoord4f;
enum glTexCoord4f = glad_glTexCoord4f;
alias PFNGLTEXCOORD4FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;
enum glTexCoord4fv = glad_glTexCoord4fv;
alias PFNGLTEXCOORD4IPROC = void function (GLint s, GLint t, GLint r, GLint q);
extern __gshared PFNGLTEXCOORD4IPROC glad_glTexCoord4i;
enum glTexCoord4i = glad_glTexCoord4i;
alias PFNGLTEXCOORD4IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;
enum glTexCoord4iv = glad_glTexCoord4iv;
alias PFNGLTEXCOORD4SPROC = void function (GLshort s, GLshort t, GLshort r, GLshort q);
extern __gshared PFNGLTEXCOORD4SPROC glad_glTexCoord4s;
enum glTexCoord4s = glad_glTexCoord4s;
alias PFNGLTEXCOORD4SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;
enum glTexCoord4sv = glad_glTexCoord4sv;
alias PFNGLVERTEX2DPROC = void function (GLdouble x, GLdouble y);
extern __gshared PFNGLVERTEX2DPROC glad_glVertex2d;
enum glVertex2d = glad_glVertex2d;
alias PFNGLVERTEX2DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLVERTEX2DVPROC glad_glVertex2dv;
enum glVertex2dv = glad_glVertex2dv;
alias PFNGLVERTEX2FPROC = void function (GLfloat x, GLfloat y);
extern __gshared PFNGLVERTEX2FPROC glad_glVertex2f;
enum glVertex2f = glad_glVertex2f;
alias PFNGLVERTEX2FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLVERTEX2FVPROC glad_glVertex2fv;
enum glVertex2fv = glad_glVertex2fv;
alias PFNGLVERTEX2IPROC = void function (GLint x, GLint y);
extern __gshared PFNGLVERTEX2IPROC glad_glVertex2i;
enum glVertex2i = glad_glVertex2i;
alias PFNGLVERTEX2IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLVERTEX2IVPROC glad_glVertex2iv;
enum glVertex2iv = glad_glVertex2iv;
alias PFNGLVERTEX2SPROC = void function (GLshort x, GLshort y);
extern __gshared PFNGLVERTEX2SPROC glad_glVertex2s;
enum glVertex2s = glad_glVertex2s;
alias PFNGLVERTEX2SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLVERTEX2SVPROC glad_glVertex2sv;
enum glVertex2sv = glad_glVertex2sv;
alias PFNGLVERTEX3DPROC = void function (GLdouble x, GLdouble y, GLdouble z);
extern __gshared PFNGLVERTEX3DPROC glad_glVertex3d;
enum glVertex3d = glad_glVertex3d;
alias PFNGLVERTEX3DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLVERTEX3DVPROC glad_glVertex3dv;
enum glVertex3dv = glad_glVertex3dv;
alias PFNGLVERTEX3FPROC = void function (GLfloat x, GLfloat y, GLfloat z);
extern __gshared PFNGLVERTEX3FPROC glad_glVertex3f;
enum glVertex3f = glad_glVertex3f;
alias PFNGLVERTEX3FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLVERTEX3FVPROC glad_glVertex3fv;
enum glVertex3fv = glad_glVertex3fv;
alias PFNGLVERTEX3IPROC = void function (GLint x, GLint y, GLint z);
extern __gshared PFNGLVERTEX3IPROC glad_glVertex3i;
enum glVertex3i = glad_glVertex3i;
alias PFNGLVERTEX3IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLVERTEX3IVPROC glad_glVertex3iv;
enum glVertex3iv = glad_glVertex3iv;
alias PFNGLVERTEX3SPROC = void function (GLshort x, GLshort y, GLshort z);
extern __gshared PFNGLVERTEX3SPROC glad_glVertex3s;
enum glVertex3s = glad_glVertex3s;
alias PFNGLVERTEX3SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLVERTEX3SVPROC glad_glVertex3sv;
enum glVertex3sv = glad_glVertex3sv;
alias PFNGLVERTEX4DPROC = void function (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern __gshared PFNGLVERTEX4DPROC glad_glVertex4d;
enum glVertex4d = glad_glVertex4d;
alias PFNGLVERTEX4DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLVERTEX4DVPROC glad_glVertex4dv;
enum glVertex4dv = glad_glVertex4dv;
alias PFNGLVERTEX4FPROC = void function (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern __gshared PFNGLVERTEX4FPROC glad_glVertex4f;
enum glVertex4f = glad_glVertex4f;
alias PFNGLVERTEX4FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLVERTEX4FVPROC glad_glVertex4fv;
enum glVertex4fv = glad_glVertex4fv;
alias PFNGLVERTEX4IPROC = void function (GLint x, GLint y, GLint z, GLint w);
extern __gshared PFNGLVERTEX4IPROC glad_glVertex4i;
enum glVertex4i = glad_glVertex4i;
alias PFNGLVERTEX4IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLVERTEX4IVPROC glad_glVertex4iv;
enum glVertex4iv = glad_glVertex4iv;
alias PFNGLVERTEX4SPROC = void function (GLshort x, GLshort y, GLshort z, GLshort w);
extern __gshared PFNGLVERTEX4SPROC glad_glVertex4s;
enum glVertex4s = glad_glVertex4s;
alias PFNGLVERTEX4SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLVERTEX4SVPROC glad_glVertex4sv;
enum glVertex4sv = glad_glVertex4sv;
alias PFNGLCLIPPLANEPROC = void function (GLenum plane, const(GLdouble)* equation);
extern __gshared PFNGLCLIPPLANEPROC glad_glClipPlane;
enum glClipPlane = glad_glClipPlane;
alias PFNGLCOLORMATERIALPROC = void function (GLenum face, GLenum mode);
extern __gshared PFNGLCOLORMATERIALPROC glad_glColorMaterial;
enum glColorMaterial = glad_glColorMaterial;
alias PFNGLFOGFPROC = void function (GLenum pname, GLfloat param);
extern __gshared PFNGLFOGFPROC glad_glFogf;
enum glFogf = glad_glFogf;
alias PFNGLFOGFVPROC = void function (GLenum pname, const(GLfloat)* params);
extern __gshared PFNGLFOGFVPROC glad_glFogfv;
enum glFogfv = glad_glFogfv;
alias PFNGLFOGIPROC = void function (GLenum pname, GLint param);
extern __gshared PFNGLFOGIPROC glad_glFogi;
enum glFogi = glad_glFogi;
alias PFNGLFOGIVPROC = void function (GLenum pname, const(GLint)* params);
extern __gshared PFNGLFOGIVPROC glad_glFogiv;
enum glFogiv = glad_glFogiv;
alias PFNGLLIGHTFPROC = void function (GLenum light, GLenum pname, GLfloat param);
extern __gshared PFNGLLIGHTFPROC glad_glLightf;
enum glLightf = glad_glLightf;
alias PFNGLLIGHTFVPROC = void function (GLenum light, GLenum pname, const(GLfloat)* params);
extern __gshared PFNGLLIGHTFVPROC glad_glLightfv;
enum glLightfv = glad_glLightfv;
alias PFNGLLIGHTIPROC = void function (GLenum light, GLenum pname, GLint param);
extern __gshared PFNGLLIGHTIPROC glad_glLighti;
enum glLighti = glad_glLighti;
alias PFNGLLIGHTIVPROC = void function (GLenum light, GLenum pname, const(GLint)* params);
extern __gshared PFNGLLIGHTIVPROC glad_glLightiv;
enum glLightiv = glad_glLightiv;
alias PFNGLLIGHTMODELFPROC = void function (GLenum pname, GLfloat param);
extern __gshared PFNGLLIGHTMODELFPROC glad_glLightModelf;
enum glLightModelf = glad_glLightModelf;
alias PFNGLLIGHTMODELFVPROC = void function (GLenum pname, const(GLfloat)* params);
extern __gshared PFNGLLIGHTMODELFVPROC glad_glLightModelfv;
enum glLightModelfv = glad_glLightModelfv;
alias PFNGLLIGHTMODELIPROC = void function (GLenum pname, GLint param);
extern __gshared PFNGLLIGHTMODELIPROC glad_glLightModeli;
enum glLightModeli = glad_glLightModeli;
alias PFNGLLIGHTMODELIVPROC = void function (GLenum pname, const(GLint)* params);
extern __gshared PFNGLLIGHTMODELIVPROC glad_glLightModeliv;
enum glLightModeliv = glad_glLightModeliv;
alias PFNGLLINESTIPPLEPROC = void function (GLint factor, GLushort pattern);
extern __gshared PFNGLLINESTIPPLEPROC glad_glLineStipple;
enum glLineStipple = glad_glLineStipple;
alias PFNGLMATERIALFPROC = void function (GLenum face, GLenum pname, GLfloat param);
extern __gshared PFNGLMATERIALFPROC glad_glMaterialf;
enum glMaterialf = glad_glMaterialf;
alias PFNGLMATERIALFVPROC = void function (GLenum face, GLenum pname, const(GLfloat)* params);
extern __gshared PFNGLMATERIALFVPROC glad_glMaterialfv;
enum glMaterialfv = glad_glMaterialfv;
alias PFNGLMATERIALIPROC = void function (GLenum face, GLenum pname, GLint param);
extern __gshared PFNGLMATERIALIPROC glad_glMateriali;
enum glMateriali = glad_glMateriali;
alias PFNGLMATERIALIVPROC = void function (GLenum face, GLenum pname, const(GLint)* params);
extern __gshared PFNGLMATERIALIVPROC glad_glMaterialiv;
enum glMaterialiv = glad_glMaterialiv;
alias PFNGLPOLYGONSTIPPLEPROC = void function (const(GLubyte)* mask);
extern __gshared PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;
enum glPolygonStipple = glad_glPolygonStipple;
alias PFNGLSHADEMODELPROC = void function (GLenum mode);
extern __gshared PFNGLSHADEMODELPROC glad_glShadeModel;
enum glShadeModel = glad_glShadeModel;
alias PFNGLTEXENVFPROC = void function (GLenum target, GLenum pname, GLfloat param);
extern __gshared PFNGLTEXENVFPROC glad_glTexEnvf;
enum glTexEnvf = glad_glTexEnvf;
alias PFNGLTEXENVFVPROC = void function (GLenum target, GLenum pname, const(GLfloat)* params);
extern __gshared PFNGLTEXENVFVPROC glad_glTexEnvfv;
enum glTexEnvfv = glad_glTexEnvfv;
alias PFNGLTEXENVIPROC = void function (GLenum target, GLenum pname, GLint param);
extern __gshared PFNGLTEXENVIPROC glad_glTexEnvi;
enum glTexEnvi = glad_glTexEnvi;
alias PFNGLTEXENVIVPROC = void function (GLenum target, GLenum pname, const(GLint)* params);
extern __gshared PFNGLTEXENVIVPROC glad_glTexEnviv;
enum glTexEnviv = glad_glTexEnviv;
alias PFNGLTEXGENDPROC = void function (GLenum coord, GLenum pname, GLdouble param);
extern __gshared PFNGLTEXGENDPROC glad_glTexGend;
enum glTexGend = glad_glTexGend;
alias PFNGLTEXGENDVPROC = void function (GLenum coord, GLenum pname, const(GLdouble)* params);
extern __gshared PFNGLTEXGENDVPROC glad_glTexGendv;
enum glTexGendv = glad_glTexGendv;
alias PFNGLTEXGENFPROC = void function (GLenum coord, GLenum pname, GLfloat param);
extern __gshared PFNGLTEXGENFPROC glad_glTexGenf;
enum glTexGenf = glad_glTexGenf;
alias PFNGLTEXGENFVPROC = void function (GLenum coord, GLenum pname, const(GLfloat)* params);
extern __gshared PFNGLTEXGENFVPROC glad_glTexGenfv;
enum glTexGenfv = glad_glTexGenfv;
alias PFNGLTEXGENIPROC = void function (GLenum coord, GLenum pname, GLint param);
extern __gshared PFNGLTEXGENIPROC glad_glTexGeni;
enum glTexGeni = glad_glTexGeni;
alias PFNGLTEXGENIVPROC = void function (GLenum coord, GLenum pname, const(GLint)* params);
extern __gshared PFNGLTEXGENIVPROC glad_glTexGeniv;
enum glTexGeniv = glad_glTexGeniv;
alias PFNGLFEEDBACKBUFFERPROC = void function (GLsizei size, GLenum type, GLfloat* buffer);
extern __gshared PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;
enum glFeedbackBuffer = glad_glFeedbackBuffer;
alias PFNGLSELECTBUFFERPROC = void function (GLsizei size, GLuint* buffer);
extern __gshared PFNGLSELECTBUFFERPROC glad_glSelectBuffer;
enum glSelectBuffer = glad_glSelectBuffer;
alias PFNGLRENDERMODEPROC = int function (GLenum mode);
extern __gshared PFNGLRENDERMODEPROC glad_glRenderMode;
enum glRenderMode = glad_glRenderMode;
alias PFNGLINITNAMESPROC = void function ();
extern __gshared PFNGLINITNAMESPROC glad_glInitNames;
enum glInitNames = glad_glInitNames;
alias PFNGLLOADNAMEPROC = void function (GLuint name);
extern __gshared PFNGLLOADNAMEPROC glad_glLoadName;
enum glLoadName = glad_glLoadName;
alias PFNGLPASSTHROUGHPROC = void function (GLfloat token);
extern __gshared PFNGLPASSTHROUGHPROC glad_glPassThrough;
enum glPassThrough = glad_glPassThrough;
alias PFNGLPOPNAMEPROC = void function ();
extern __gshared PFNGLPOPNAMEPROC glad_glPopName;
enum glPopName = glad_glPopName;
alias PFNGLPUSHNAMEPROC = void function (GLuint name);
extern __gshared PFNGLPUSHNAMEPROC glad_glPushName;
enum glPushName = glad_glPushName;
alias PFNGLCLEARACCUMPROC = void function (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern __gshared PFNGLCLEARACCUMPROC glad_glClearAccum;
enum glClearAccum = glad_glClearAccum;
alias PFNGLCLEARINDEXPROC = void function (GLfloat c);
extern __gshared PFNGLCLEARINDEXPROC glad_glClearIndex;
enum glClearIndex = glad_glClearIndex;
alias PFNGLINDEXMASKPROC = void function (GLuint mask);
extern __gshared PFNGLINDEXMASKPROC glad_glIndexMask;
enum glIndexMask = glad_glIndexMask;
alias PFNGLACCUMPROC = void function (GLenum op, GLfloat value);
extern __gshared PFNGLACCUMPROC glad_glAccum;
enum glAccum = glad_glAccum;
alias PFNGLPOPATTRIBPROC = void function ();
extern __gshared PFNGLPOPATTRIBPROC glad_glPopAttrib;
enum glPopAttrib = glad_glPopAttrib;
alias PFNGLPUSHATTRIBPROC = void function (GLbitfield mask);
extern __gshared PFNGLPUSHATTRIBPROC glad_glPushAttrib;
enum glPushAttrib = glad_glPushAttrib;
alias PFNGLMAP1DPROC = void function (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const(GLdouble)* points);
extern __gshared PFNGLMAP1DPROC glad_glMap1d;
enum glMap1d = glad_glMap1d;
alias PFNGLMAP1FPROC = void function (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const(GLfloat)* points);
extern __gshared PFNGLMAP1FPROC glad_glMap1f;
enum glMap1f = glad_glMap1f;
alias PFNGLMAP2DPROC = void function (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const(GLdouble)* points);
extern __gshared PFNGLMAP2DPROC glad_glMap2d;
enum glMap2d = glad_glMap2d;
alias PFNGLMAP2FPROC = void function (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const(GLfloat)* points);
extern __gshared PFNGLMAP2FPROC glad_glMap2f;
enum glMap2f = glad_glMap2f;
alias PFNGLMAPGRID1DPROC = void function (GLint un, GLdouble u1, GLdouble u2);
extern __gshared PFNGLMAPGRID1DPROC glad_glMapGrid1d;
enum glMapGrid1d = glad_glMapGrid1d;
alias PFNGLMAPGRID1FPROC = void function (GLint un, GLfloat u1, GLfloat u2);
extern __gshared PFNGLMAPGRID1FPROC glad_glMapGrid1f;
enum glMapGrid1f = glad_glMapGrid1f;
alias PFNGLMAPGRID2DPROC = void function (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
extern __gshared PFNGLMAPGRID2DPROC glad_glMapGrid2d;
enum glMapGrid2d = glad_glMapGrid2d;
alias PFNGLMAPGRID2FPROC = void function (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
extern __gshared PFNGLMAPGRID2FPROC glad_glMapGrid2f;
enum glMapGrid2f = glad_glMapGrid2f;
alias PFNGLEVALCOORD1DPROC = void function (GLdouble u);
extern __gshared PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;
enum glEvalCoord1d = glad_glEvalCoord1d;
alias PFNGLEVALCOORD1DVPROC = void function (const(GLdouble)* u);
extern __gshared PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;
enum glEvalCoord1dv = glad_glEvalCoord1dv;
alias PFNGLEVALCOORD1FPROC = void function (GLfloat u);
extern __gshared PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;
enum glEvalCoord1f = glad_glEvalCoord1f;
alias PFNGLEVALCOORD1FVPROC = void function (const(GLfloat)* u);
extern __gshared PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;
enum glEvalCoord1fv = glad_glEvalCoord1fv;
alias PFNGLEVALCOORD2DPROC = void function (GLdouble u, GLdouble v);
extern __gshared PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;
enum glEvalCoord2d = glad_glEvalCoord2d;
alias PFNGLEVALCOORD2DVPROC = void function (const(GLdouble)* u);
extern __gshared PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;
enum glEvalCoord2dv = glad_glEvalCoord2dv;
alias PFNGLEVALCOORD2FPROC = void function (GLfloat u, GLfloat v);
extern __gshared PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;
enum glEvalCoord2f = glad_glEvalCoord2f;
alias PFNGLEVALCOORD2FVPROC = void function (const(GLfloat)* u);
extern __gshared PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;
enum glEvalCoord2fv = glad_glEvalCoord2fv;
alias PFNGLEVALMESH1PROC = void function (GLenum mode, GLint i1, GLint i2);
extern __gshared PFNGLEVALMESH1PROC glad_glEvalMesh1;
enum glEvalMesh1 = glad_glEvalMesh1;
alias PFNGLEVALPOINT1PROC = void function (GLint i);
extern __gshared PFNGLEVALPOINT1PROC glad_glEvalPoint1;
enum glEvalPoint1 = glad_glEvalPoint1;
alias PFNGLEVALMESH2PROC = void function (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
extern __gshared PFNGLEVALMESH2PROC glad_glEvalMesh2;
enum glEvalMesh2 = glad_glEvalMesh2;
alias PFNGLEVALPOINT2PROC = void function (GLint i, GLint j);
extern __gshared PFNGLEVALPOINT2PROC glad_glEvalPoint2;
enum glEvalPoint2 = glad_glEvalPoint2;
alias PFNGLALPHAFUNCPROC = void function (GLenum func, GLfloat ref_);
extern __gshared PFNGLALPHAFUNCPROC glad_glAlphaFunc;
enum glAlphaFunc = glad_glAlphaFunc;
alias PFNGLPIXELZOOMPROC = void function (GLfloat xfactor, GLfloat yfactor);
extern __gshared PFNGLPIXELZOOMPROC glad_glPixelZoom;
enum glPixelZoom = glad_glPixelZoom;
alias PFNGLPIXELTRANSFERFPROC = void function (GLenum pname, GLfloat param);
extern __gshared PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;
enum glPixelTransferf = glad_glPixelTransferf;
alias PFNGLPIXELTRANSFERIPROC = void function (GLenum pname, GLint param);
extern __gshared PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;
enum glPixelTransferi = glad_glPixelTransferi;
alias PFNGLPIXELMAPFVPROC = void function (GLenum map, GLsizei mapsize, const(GLfloat)* values);
extern __gshared PFNGLPIXELMAPFVPROC glad_glPixelMapfv;
enum glPixelMapfv = glad_glPixelMapfv;
alias PFNGLPIXELMAPUIVPROC = void function (GLenum map, GLsizei mapsize, const(GLuint)* values);
extern __gshared PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;
enum glPixelMapuiv = glad_glPixelMapuiv;
alias PFNGLPIXELMAPUSVPROC = void function (GLenum map, GLsizei mapsize, const(GLushort)* values);
extern __gshared PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;
enum glPixelMapusv = glad_glPixelMapusv;
alias PFNGLCOPYPIXELSPROC = void function (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
extern __gshared PFNGLCOPYPIXELSPROC glad_glCopyPixels;
enum glCopyPixels = glad_glCopyPixels;
alias PFNGLDRAWPIXELSPROC = void function (GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels);
extern __gshared PFNGLDRAWPIXELSPROC glad_glDrawPixels;
enum glDrawPixels = glad_glDrawPixels;
alias PFNGLGETCLIPPLANEPROC = void function (GLenum plane, GLdouble* equation);
extern __gshared PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;
enum glGetClipPlane = glad_glGetClipPlane;
alias PFNGLGETLIGHTFVPROC = void function (GLenum light, GLenum pname, GLfloat* params);
extern __gshared PFNGLGETLIGHTFVPROC glad_glGetLightfv;
enum glGetLightfv = glad_glGetLightfv;
alias PFNGLGETLIGHTIVPROC = void function (GLenum light, GLenum pname, GLint* params);
extern __gshared PFNGLGETLIGHTIVPROC glad_glGetLightiv;
enum glGetLightiv = glad_glGetLightiv;
alias PFNGLGETMAPDVPROC = void function (GLenum target, GLenum query, GLdouble* v);
extern __gshared PFNGLGETMAPDVPROC glad_glGetMapdv;
enum glGetMapdv = glad_glGetMapdv;
alias PFNGLGETMAPFVPROC = void function (GLenum target, GLenum query, GLfloat* v);
extern __gshared PFNGLGETMAPFVPROC glad_glGetMapfv;
enum glGetMapfv = glad_glGetMapfv;
alias PFNGLGETMAPIVPROC = void function (GLenum target, GLenum query, GLint* v);
extern __gshared PFNGLGETMAPIVPROC glad_glGetMapiv;
enum glGetMapiv = glad_glGetMapiv;
alias PFNGLGETMATERIALFVPROC = void function (GLenum face, GLenum pname, GLfloat* params);
extern __gshared PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;
enum glGetMaterialfv = glad_glGetMaterialfv;
alias PFNGLGETMATERIALIVPROC = void function (GLenum face, GLenum pname, GLint* params);
extern __gshared PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;
enum glGetMaterialiv = glad_glGetMaterialiv;
alias PFNGLGETPIXELMAPFVPROC = void function (GLenum map, GLfloat* values);
extern __gshared PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;
enum glGetPixelMapfv = glad_glGetPixelMapfv;
alias PFNGLGETPIXELMAPUIVPROC = void function (GLenum map, GLuint* values);
extern __gshared PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;
enum glGetPixelMapuiv = glad_glGetPixelMapuiv;
alias PFNGLGETPIXELMAPUSVPROC = void function (GLenum map, GLushort* values);
extern __gshared PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;
enum glGetPixelMapusv = glad_glGetPixelMapusv;
alias PFNGLGETPOLYGONSTIPPLEPROC = void function (GLubyte* mask);
extern __gshared PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;
enum glGetPolygonStipple = glad_glGetPolygonStipple;
alias PFNGLGETTEXENVFVPROC = void function (GLenum target, GLenum pname, GLfloat* params);
extern __gshared PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;
enum glGetTexEnvfv = glad_glGetTexEnvfv;
alias PFNGLGETTEXENVIVPROC = void function (GLenum target, GLenum pname, GLint* params);
extern __gshared PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;
enum glGetTexEnviv = glad_glGetTexEnviv;
alias PFNGLGETTEXGENDVPROC = void function (GLenum coord, GLenum pname, GLdouble* params);
extern __gshared PFNGLGETTEXGENDVPROC glad_glGetTexGendv;
enum glGetTexGendv = glad_glGetTexGendv;
alias PFNGLGETTEXGENFVPROC = void function (GLenum coord, GLenum pname, GLfloat* params);
extern __gshared PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;
enum glGetTexGenfv = glad_glGetTexGenfv;
alias PFNGLGETTEXGENIVPROC = void function (GLenum coord, GLenum pname, GLint* params);
extern __gshared PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;
enum glGetTexGeniv = glad_glGetTexGeniv;
alias PFNGLISLISTPROC = ubyte function (GLuint list);
extern __gshared PFNGLISLISTPROC glad_glIsList;
enum glIsList = glad_glIsList;
alias PFNGLFRUSTUMPROC = void function (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern __gshared PFNGLFRUSTUMPROC glad_glFrustum;
enum glFrustum = glad_glFrustum;
alias PFNGLLOADIDENTITYPROC = void function ();
extern __gshared PFNGLLOADIDENTITYPROC glad_glLoadIdentity;
enum glLoadIdentity = glad_glLoadIdentity;
alias PFNGLLOADMATRIXFPROC = void function (const(GLfloat)* m);
extern __gshared PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;
enum glLoadMatrixf = glad_glLoadMatrixf;
alias PFNGLLOADMATRIXDPROC = void function (const(GLdouble)* m);
extern __gshared PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;
enum glLoadMatrixd = glad_glLoadMatrixd;
alias PFNGLMATRIXMODEPROC = void function (GLenum mode);
extern __gshared PFNGLMATRIXMODEPROC glad_glMatrixMode;
enum glMatrixMode = glad_glMatrixMode;
alias PFNGLMULTMATRIXFPROC = void function (const(GLfloat)* m);
extern __gshared PFNGLMULTMATRIXFPROC glad_glMultMatrixf;
enum glMultMatrixf = glad_glMultMatrixf;
alias PFNGLMULTMATRIXDPROC = void function (const(GLdouble)* m);
extern __gshared PFNGLMULTMATRIXDPROC glad_glMultMatrixd;
enum glMultMatrixd = glad_glMultMatrixd;
alias PFNGLORTHOPROC = void function (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern __gshared PFNGLORTHOPROC glad_glOrtho;
enum glOrtho = glad_glOrtho;
alias PFNGLPOPMATRIXPROC = void function ();
extern __gshared PFNGLPOPMATRIXPROC glad_glPopMatrix;
enum glPopMatrix = glad_glPopMatrix;
alias PFNGLPUSHMATRIXPROC = void function ();
extern __gshared PFNGLPUSHMATRIXPROC glad_glPushMatrix;
enum glPushMatrix = glad_glPushMatrix;
alias PFNGLROTATEDPROC = void function (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
extern __gshared PFNGLROTATEDPROC glad_glRotated;
enum glRotated = glad_glRotated;
alias PFNGLROTATEFPROC = void function (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
extern __gshared PFNGLROTATEFPROC glad_glRotatef;
enum glRotatef = glad_glRotatef;
alias PFNGLSCALEDPROC = void function (GLdouble x, GLdouble y, GLdouble z);
extern __gshared PFNGLSCALEDPROC glad_glScaled;
enum glScaled = glad_glScaled;
alias PFNGLSCALEFPROC = void function (GLfloat x, GLfloat y, GLfloat z);
extern __gshared PFNGLSCALEFPROC glad_glScalef;
enum glScalef = glad_glScalef;
alias PFNGLTRANSLATEDPROC = void function (GLdouble x, GLdouble y, GLdouble z);
extern __gshared PFNGLTRANSLATEDPROC glad_glTranslated;
enum glTranslated = glad_glTranslated;
alias PFNGLTRANSLATEFPROC = void function (GLfloat x, GLfloat y, GLfloat z);
extern __gshared PFNGLTRANSLATEFPROC glad_glTranslatef;
enum glTranslatef = glad_glTranslatef;

enum GL_VERSION_1_1 = 1;
extern __gshared int GLAD_GL_VERSION_1_1;
alias PFNGLDRAWARRAYSPROC = void function (GLenum mode, GLint first, GLsizei count);
extern __gshared PFNGLDRAWARRAYSPROC glad_glDrawArrays;
enum glDrawArrays = glad_glDrawArrays;
alias PFNGLDRAWELEMENTSPROC = void function (GLenum mode, GLsizei count, GLenum type, const(void)* indices);
extern __gshared PFNGLDRAWELEMENTSPROC glad_glDrawElements;
enum glDrawElements = glad_glDrawElements;
alias PFNGLGETPOINTERVPROC = void function (GLenum pname, void** params);
extern __gshared PFNGLGETPOINTERVPROC glad_glGetPointerv;
enum glGetPointerv = glad_glGetPointerv;
alias PFNGLPOLYGONOFFSETPROC = void function (GLfloat factor, GLfloat units);
extern __gshared PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
enum glPolygonOffset = glad_glPolygonOffset;
alias PFNGLCOPYTEXIMAGE1DPROC = void function (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
extern __gshared PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
enum glCopyTexImage1D = glad_glCopyTexImage1D;
alias PFNGLCOPYTEXIMAGE2DPROC = void function (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern __gshared PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
enum glCopyTexImage2D = glad_glCopyTexImage2D;
alias PFNGLCOPYTEXSUBIMAGE1DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern __gshared PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
enum glCopyTexSubImage1D = glad_glCopyTexSubImage1D;
alias PFNGLCOPYTEXSUBIMAGE2DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern __gshared PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
enum glCopyTexSubImage2D = glad_glCopyTexSubImage2D;
alias PFNGLTEXSUBIMAGE1DPROC = void function (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels);
extern __gshared PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
enum glTexSubImage1D = glad_glTexSubImage1D;
alias PFNGLTEXSUBIMAGE2DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels);
extern __gshared PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
enum glTexSubImage2D = glad_glTexSubImage2D;
alias PFNGLBINDTEXTUREPROC = void function (GLenum target, GLuint texture);
extern __gshared PFNGLBINDTEXTUREPROC glad_glBindTexture;
enum glBindTexture = glad_glBindTexture;
alias PFNGLDELETETEXTURESPROC = void function (GLsizei n, const(GLuint)* textures);
extern __gshared PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
enum glDeleteTextures = glad_glDeleteTextures;
alias PFNGLGENTEXTURESPROC = void function (GLsizei n, GLuint* textures);
extern __gshared PFNGLGENTEXTURESPROC glad_glGenTextures;
enum glGenTextures = glad_glGenTextures;
alias PFNGLISTEXTUREPROC = ubyte function (GLuint texture);
extern __gshared PFNGLISTEXTUREPROC glad_glIsTexture;
enum glIsTexture = glad_glIsTexture;
alias PFNGLARRAYELEMENTPROC = void function (GLint i);
extern __gshared PFNGLARRAYELEMENTPROC glad_glArrayElement;
enum glArrayElement = glad_glArrayElement;
alias PFNGLCOLORPOINTERPROC = void function (GLint size, GLenum type, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLCOLORPOINTERPROC glad_glColorPointer;
enum glColorPointer = glad_glColorPointer;
alias PFNGLDISABLECLIENTSTATEPROC = void function (GLenum array);
extern __gshared PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;
enum glDisableClientState = glad_glDisableClientState;
alias PFNGLEDGEFLAGPOINTERPROC = void function (GLsizei stride, const(void)* pointer);
extern __gshared PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;
enum glEdgeFlagPointer = glad_glEdgeFlagPointer;
alias PFNGLENABLECLIENTSTATEPROC = void function (GLenum array);
extern __gshared PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;
enum glEnableClientState = glad_glEnableClientState;
alias PFNGLINDEXPOINTERPROC = void function (GLenum type, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLINDEXPOINTERPROC glad_glIndexPointer;
enum glIndexPointer = glad_glIndexPointer;
alias PFNGLINTERLEAVEDARRAYSPROC = void function (GLenum format, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;
enum glInterleavedArrays = glad_glInterleavedArrays;
alias PFNGLNORMALPOINTERPROC = void function (GLenum type, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLNORMALPOINTERPROC glad_glNormalPointer;
enum glNormalPointer = glad_glNormalPointer;
alias PFNGLTEXCOORDPOINTERPROC = void function (GLint size, GLenum type, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;
enum glTexCoordPointer = glad_glTexCoordPointer;
alias PFNGLVERTEXPOINTERPROC = void function (GLint size, GLenum type, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLVERTEXPOINTERPROC glad_glVertexPointer;
enum glVertexPointer = glad_glVertexPointer;
alias PFNGLARETEXTURESRESIDENTPROC = ubyte function (GLsizei n, const(GLuint)* textures, GLboolean* residences);
extern __gshared PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;
enum glAreTexturesResident = glad_glAreTexturesResident;
alias PFNGLPRIORITIZETEXTURESPROC = void function (GLsizei n, const(GLuint)* textures, const(GLfloat)* priorities);
extern __gshared PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;
enum glPrioritizeTextures = glad_glPrioritizeTextures;
alias PFNGLINDEXUBPROC = void function (GLubyte c);
extern __gshared PFNGLINDEXUBPROC glad_glIndexub;
enum glIndexub = glad_glIndexub;
alias PFNGLINDEXUBVPROC = void function (const(GLubyte)* c);
extern __gshared PFNGLINDEXUBVPROC glad_glIndexubv;
enum glIndexubv = glad_glIndexubv;
alias PFNGLPOPCLIENTATTRIBPROC = void function ();
extern __gshared PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;
enum glPopClientAttrib = glad_glPopClientAttrib;
alias PFNGLPUSHCLIENTATTRIBPROC = void function (GLbitfield mask);
extern __gshared PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;
enum glPushClientAttrib = glad_glPushClientAttrib;

enum GL_VERSION_1_2 = 1;
extern __gshared int GLAD_GL_VERSION_1_2;
alias PFNGLDRAWRANGEELEMENTSPROC = void function (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices);
extern __gshared PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
enum glDrawRangeElements = glad_glDrawRangeElements;
alias PFNGLTEXIMAGE3DPROC = void function (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels);
extern __gshared PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
enum glTexImage3D = glad_glTexImage3D;
alias PFNGLTEXSUBIMAGE3DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels);
extern __gshared PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
enum glTexSubImage3D = glad_glTexSubImage3D;
alias PFNGLCOPYTEXSUBIMAGE3DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern __gshared PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
enum glCopyTexSubImage3D = glad_glCopyTexSubImage3D;

enum GL_VERSION_1_3 = 1;
extern __gshared int GLAD_GL_VERSION_1_3;
alias PFNGLACTIVETEXTUREPROC = void function (GLenum texture);
extern __gshared PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
enum glActiveTexture = glad_glActiveTexture;
alias PFNGLSAMPLECOVERAGEPROC = void function (GLfloat value, GLboolean invert);
extern __gshared PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
enum glSampleCoverage = glad_glSampleCoverage;
alias PFNGLCOMPRESSEDTEXIMAGE3DPROC = void function (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* data);
extern __gshared PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
enum glCompressedTexImage3D = glad_glCompressedTexImage3D;
alias PFNGLCOMPRESSEDTEXIMAGE2DPROC = void function (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* data);
extern __gshared PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
enum glCompressedTexImage2D = glad_glCompressedTexImage2D;
alias PFNGLCOMPRESSEDTEXIMAGE1DPROC = void function (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(void)* data);
extern __gshared PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
enum glCompressedTexImage1D = glad_glCompressedTexImage1D;
alias PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data);
extern __gshared PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
enum glCompressedTexSubImage3D = glad_glCompressedTexSubImage3D;
alias PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* data);
extern __gshared PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
enum glCompressedTexSubImage2D = glad_glCompressedTexSubImage2D;
alias PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = void function (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* data);
extern __gshared PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
enum glCompressedTexSubImage1D = glad_glCompressedTexSubImage1D;
alias PFNGLGETCOMPRESSEDTEXIMAGEPROC = void function (GLenum target, GLint level, void* img);
extern __gshared PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
enum glGetCompressedTexImage = glad_glGetCompressedTexImage;
alias PFNGLCLIENTACTIVETEXTUREPROC = void function (GLenum texture);
extern __gshared PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;
enum glClientActiveTexture = glad_glClientActiveTexture;
alias PFNGLMULTITEXCOORD1DPROC = void function (GLenum target, GLdouble s);
extern __gshared PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;
enum glMultiTexCoord1d = glad_glMultiTexCoord1d;
alias PFNGLMULTITEXCOORD1DVPROC = void function (GLenum target, const(GLdouble)* v);
extern __gshared PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;
enum glMultiTexCoord1dv = glad_glMultiTexCoord1dv;
alias PFNGLMULTITEXCOORD1FPROC = void function (GLenum target, GLfloat s);
extern __gshared PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;
enum glMultiTexCoord1f = glad_glMultiTexCoord1f;
alias PFNGLMULTITEXCOORD1FVPROC = void function (GLenum target, const(GLfloat)* v);
extern __gshared PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;
enum glMultiTexCoord1fv = glad_glMultiTexCoord1fv;
alias PFNGLMULTITEXCOORD1IPROC = void function (GLenum target, GLint s);
extern __gshared PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;
enum glMultiTexCoord1i = glad_glMultiTexCoord1i;
alias PFNGLMULTITEXCOORD1IVPROC = void function (GLenum target, const(GLint)* v);
extern __gshared PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;
enum glMultiTexCoord1iv = glad_glMultiTexCoord1iv;
alias PFNGLMULTITEXCOORD1SPROC = void function (GLenum target, GLshort s);
extern __gshared PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;
enum glMultiTexCoord1s = glad_glMultiTexCoord1s;
alias PFNGLMULTITEXCOORD1SVPROC = void function (GLenum target, const(GLshort)* v);
extern __gshared PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;
enum glMultiTexCoord1sv = glad_glMultiTexCoord1sv;
alias PFNGLMULTITEXCOORD2DPROC = void function (GLenum target, GLdouble s, GLdouble t);
extern __gshared PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;
enum glMultiTexCoord2d = glad_glMultiTexCoord2d;
alias PFNGLMULTITEXCOORD2DVPROC = void function (GLenum target, const(GLdouble)* v);
extern __gshared PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;
enum glMultiTexCoord2dv = glad_glMultiTexCoord2dv;
alias PFNGLMULTITEXCOORD2FPROC = void function (GLenum target, GLfloat s, GLfloat t);
extern __gshared PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;
enum glMultiTexCoord2f = glad_glMultiTexCoord2f;
alias PFNGLMULTITEXCOORD2FVPROC = void function (GLenum target, const(GLfloat)* v);
extern __gshared PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;
enum glMultiTexCoord2fv = glad_glMultiTexCoord2fv;
alias PFNGLMULTITEXCOORD2IPROC = void function (GLenum target, GLint s, GLint t);
extern __gshared PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;
enum glMultiTexCoord2i = glad_glMultiTexCoord2i;
alias PFNGLMULTITEXCOORD2IVPROC = void function (GLenum target, const(GLint)* v);
extern __gshared PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;
enum glMultiTexCoord2iv = glad_glMultiTexCoord2iv;
alias PFNGLMULTITEXCOORD2SPROC = void function (GLenum target, GLshort s, GLshort t);
extern __gshared PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;
enum glMultiTexCoord2s = glad_glMultiTexCoord2s;
alias PFNGLMULTITEXCOORD2SVPROC = void function (GLenum target, const(GLshort)* v);
extern __gshared PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;
enum glMultiTexCoord2sv = glad_glMultiTexCoord2sv;
alias PFNGLMULTITEXCOORD3DPROC = void function (GLenum target, GLdouble s, GLdouble t, GLdouble r);
extern __gshared PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;
enum glMultiTexCoord3d = glad_glMultiTexCoord3d;
alias PFNGLMULTITEXCOORD3DVPROC = void function (GLenum target, const(GLdouble)* v);
extern __gshared PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;
enum glMultiTexCoord3dv = glad_glMultiTexCoord3dv;
alias PFNGLMULTITEXCOORD3FPROC = void function (GLenum target, GLfloat s, GLfloat t, GLfloat r);
extern __gshared PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;
enum glMultiTexCoord3f = glad_glMultiTexCoord3f;
alias PFNGLMULTITEXCOORD3FVPROC = void function (GLenum target, const(GLfloat)* v);
extern __gshared PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;
enum glMultiTexCoord3fv = glad_glMultiTexCoord3fv;
alias PFNGLMULTITEXCOORD3IPROC = void function (GLenum target, GLint s, GLint t, GLint r);
extern __gshared PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;
enum glMultiTexCoord3i = glad_glMultiTexCoord3i;
alias PFNGLMULTITEXCOORD3IVPROC = void function (GLenum target, const(GLint)* v);
extern __gshared PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;
enum glMultiTexCoord3iv = glad_glMultiTexCoord3iv;
alias PFNGLMULTITEXCOORD3SPROC = void function (GLenum target, GLshort s, GLshort t, GLshort r);
extern __gshared PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;
enum glMultiTexCoord3s = glad_glMultiTexCoord3s;
alias PFNGLMULTITEXCOORD3SVPROC = void function (GLenum target, const(GLshort)* v);
extern __gshared PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;
enum glMultiTexCoord3sv = glad_glMultiTexCoord3sv;
alias PFNGLMULTITEXCOORD4DPROC = void function (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern __gshared PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;
enum glMultiTexCoord4d = glad_glMultiTexCoord4d;
alias PFNGLMULTITEXCOORD4DVPROC = void function (GLenum target, const(GLdouble)* v);
extern __gshared PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;
enum glMultiTexCoord4dv = glad_glMultiTexCoord4dv;
alias PFNGLMULTITEXCOORD4FPROC = void function (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern __gshared PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;
enum glMultiTexCoord4f = glad_glMultiTexCoord4f;
alias PFNGLMULTITEXCOORD4FVPROC = void function (GLenum target, const(GLfloat)* v);
extern __gshared PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;
enum glMultiTexCoord4fv = glad_glMultiTexCoord4fv;
alias PFNGLMULTITEXCOORD4IPROC = void function (GLenum target, GLint s, GLint t, GLint r, GLint q);
extern __gshared PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;
enum glMultiTexCoord4i = glad_glMultiTexCoord4i;
alias PFNGLMULTITEXCOORD4IVPROC = void function (GLenum target, const(GLint)* v);
extern __gshared PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;
enum glMultiTexCoord4iv = glad_glMultiTexCoord4iv;
alias PFNGLMULTITEXCOORD4SPROC = void function (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
extern __gshared PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;
enum glMultiTexCoord4s = glad_glMultiTexCoord4s;
alias PFNGLMULTITEXCOORD4SVPROC = void function (GLenum target, const(GLshort)* v);
extern __gshared PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;
enum glMultiTexCoord4sv = glad_glMultiTexCoord4sv;
alias PFNGLLOADTRANSPOSEMATRIXFPROC = void function (const(GLfloat)* m);
extern __gshared PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;
enum glLoadTransposeMatrixf = glad_glLoadTransposeMatrixf;
alias PFNGLLOADTRANSPOSEMATRIXDPROC = void function (const(GLdouble)* m);
extern __gshared PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;
enum glLoadTransposeMatrixd = glad_glLoadTransposeMatrixd;
alias PFNGLMULTTRANSPOSEMATRIXFPROC = void function (const(GLfloat)* m);
extern __gshared PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;
enum glMultTransposeMatrixf = glad_glMultTransposeMatrixf;
alias PFNGLMULTTRANSPOSEMATRIXDPROC = void function (const(GLdouble)* m);
extern __gshared PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;
enum glMultTransposeMatrixd = glad_glMultTransposeMatrixd;

enum GL_VERSION_1_4 = 1;
extern __gshared int GLAD_GL_VERSION_1_4;
alias PFNGLBLENDFUNCSEPARATEPROC = void function (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
extern __gshared PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
enum glBlendFuncSeparate = glad_glBlendFuncSeparate;
alias PFNGLMULTIDRAWARRAYSPROC = void function (GLenum mode, const(GLint)* first, const(GLsizei)* count, GLsizei drawcount);
extern __gshared PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
enum glMultiDrawArrays = glad_glMultiDrawArrays;
alias PFNGLMULTIDRAWELEMENTSPROC = void function (GLenum mode, const(GLsizei)* count, GLenum type, const(void*)* indices, GLsizei drawcount);
extern __gshared PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
enum glMultiDrawElements = glad_glMultiDrawElements;
alias PFNGLPOINTPARAMETERFPROC = void function (GLenum pname, GLfloat param);
extern __gshared PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
enum glPointParameterf = glad_glPointParameterf;
alias PFNGLPOINTPARAMETERFVPROC = void function (GLenum pname, const(GLfloat)* params);
extern __gshared PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
enum glPointParameterfv = glad_glPointParameterfv;
alias PFNGLPOINTPARAMETERIPROC = void function (GLenum pname, GLint param);
extern __gshared PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
enum glPointParameteri = glad_glPointParameteri;
alias PFNGLPOINTPARAMETERIVPROC = void function (GLenum pname, const(GLint)* params);
extern __gshared PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
enum glPointParameteriv = glad_glPointParameteriv;
alias PFNGLFOGCOORDFPROC = void function (GLfloat coord);
extern __gshared PFNGLFOGCOORDFPROC glad_glFogCoordf;
enum glFogCoordf = glad_glFogCoordf;
alias PFNGLFOGCOORDFVPROC = void function (const(GLfloat)* coord);
extern __gshared PFNGLFOGCOORDFVPROC glad_glFogCoordfv;
enum glFogCoordfv = glad_glFogCoordfv;
alias PFNGLFOGCOORDDPROC = void function (GLdouble coord);
extern __gshared PFNGLFOGCOORDDPROC glad_glFogCoordd;
enum glFogCoordd = glad_glFogCoordd;
alias PFNGLFOGCOORDDVPROC = void function (const(GLdouble)* coord);
extern __gshared PFNGLFOGCOORDDVPROC glad_glFogCoorddv;
enum glFogCoorddv = glad_glFogCoorddv;
alias PFNGLFOGCOORDPOINTERPROC = void function (GLenum type, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;
enum glFogCoordPointer = glad_glFogCoordPointer;
alias PFNGLSECONDARYCOLOR3BPROC = void function (GLbyte red, GLbyte green, GLbyte blue);
extern __gshared PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;
enum glSecondaryColor3b = glad_glSecondaryColor3b;
alias PFNGLSECONDARYCOLOR3BVPROC = void function (const(GLbyte)* v);
extern __gshared PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;
enum glSecondaryColor3bv = glad_glSecondaryColor3bv;
alias PFNGLSECONDARYCOLOR3DPROC = void function (GLdouble red, GLdouble green, GLdouble blue);
extern __gshared PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;
enum glSecondaryColor3d = glad_glSecondaryColor3d;
alias PFNGLSECONDARYCOLOR3DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;
enum glSecondaryColor3dv = glad_glSecondaryColor3dv;
alias PFNGLSECONDARYCOLOR3FPROC = void function (GLfloat red, GLfloat green, GLfloat blue);
extern __gshared PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;
enum glSecondaryColor3f = glad_glSecondaryColor3f;
alias PFNGLSECONDARYCOLOR3FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;
enum glSecondaryColor3fv = glad_glSecondaryColor3fv;
alias PFNGLSECONDARYCOLOR3IPROC = void function (GLint red, GLint green, GLint blue);
extern __gshared PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;
enum glSecondaryColor3i = glad_glSecondaryColor3i;
alias PFNGLSECONDARYCOLOR3IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;
enum glSecondaryColor3iv = glad_glSecondaryColor3iv;
alias PFNGLSECONDARYCOLOR3SPROC = void function (GLshort red, GLshort green, GLshort blue);
extern __gshared PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;
enum glSecondaryColor3s = glad_glSecondaryColor3s;
alias PFNGLSECONDARYCOLOR3SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;
enum glSecondaryColor3sv = glad_glSecondaryColor3sv;
alias PFNGLSECONDARYCOLOR3UBPROC = void function (GLubyte red, GLubyte green, GLubyte blue);
extern __gshared PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;
enum glSecondaryColor3ub = glad_glSecondaryColor3ub;
alias PFNGLSECONDARYCOLOR3UBVPROC = void function (const(GLubyte)* v);
extern __gshared PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;
enum glSecondaryColor3ubv = glad_glSecondaryColor3ubv;
alias PFNGLSECONDARYCOLOR3UIPROC = void function (GLuint red, GLuint green, GLuint blue);
extern __gshared PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;
enum glSecondaryColor3ui = glad_glSecondaryColor3ui;
alias PFNGLSECONDARYCOLOR3UIVPROC = void function (const(GLuint)* v);
extern __gshared PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;
enum glSecondaryColor3uiv = glad_glSecondaryColor3uiv;
alias PFNGLSECONDARYCOLOR3USPROC = void function (GLushort red, GLushort green, GLushort blue);
extern __gshared PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;
enum glSecondaryColor3us = glad_glSecondaryColor3us;
alias PFNGLSECONDARYCOLOR3USVPROC = void function (const(GLushort)* v);
extern __gshared PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;
enum glSecondaryColor3usv = glad_glSecondaryColor3usv;
alias PFNGLSECONDARYCOLORPOINTERPROC = void function (GLint size, GLenum type, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;
enum glSecondaryColorPointer = glad_glSecondaryColorPointer;
alias PFNGLWINDOWPOS2DPROC = void function (GLdouble x, GLdouble y);
extern __gshared PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;
enum glWindowPos2d = glad_glWindowPos2d;
alias PFNGLWINDOWPOS2DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;
enum glWindowPos2dv = glad_glWindowPos2dv;
alias PFNGLWINDOWPOS2FPROC = void function (GLfloat x, GLfloat y);
extern __gshared PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;
enum glWindowPos2f = glad_glWindowPos2f;
alias PFNGLWINDOWPOS2FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;
enum glWindowPos2fv = glad_glWindowPos2fv;
alias PFNGLWINDOWPOS2IPROC = void function (GLint x, GLint y);
extern __gshared PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;
enum glWindowPos2i = glad_glWindowPos2i;
alias PFNGLWINDOWPOS2IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;
enum glWindowPos2iv = glad_glWindowPos2iv;
alias PFNGLWINDOWPOS2SPROC = void function (GLshort x, GLshort y);
extern __gshared PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;
enum glWindowPos2s = glad_glWindowPos2s;
alias PFNGLWINDOWPOS2SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;
enum glWindowPos2sv = glad_glWindowPos2sv;
alias PFNGLWINDOWPOS3DPROC = void function (GLdouble x, GLdouble y, GLdouble z);
extern __gshared PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;
enum glWindowPos3d = glad_glWindowPos3d;
alias PFNGLWINDOWPOS3DVPROC = void function (const(GLdouble)* v);
extern __gshared PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;
enum glWindowPos3dv = glad_glWindowPos3dv;
alias PFNGLWINDOWPOS3FPROC = void function (GLfloat x, GLfloat y, GLfloat z);
extern __gshared PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;
enum glWindowPos3f = glad_glWindowPos3f;
alias PFNGLWINDOWPOS3FVPROC = void function (const(GLfloat)* v);
extern __gshared PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;
enum glWindowPos3fv = glad_glWindowPos3fv;
alias PFNGLWINDOWPOS3IPROC = void function (GLint x, GLint y, GLint z);
extern __gshared PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;
enum glWindowPos3i = glad_glWindowPos3i;
alias PFNGLWINDOWPOS3IVPROC = void function (const(GLint)* v);
extern __gshared PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;
enum glWindowPos3iv = glad_glWindowPos3iv;
alias PFNGLWINDOWPOS3SPROC = void function (GLshort x, GLshort y, GLshort z);
extern __gshared PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;
enum glWindowPos3s = glad_glWindowPos3s;
alias PFNGLWINDOWPOS3SVPROC = void function (const(GLshort)* v);
extern __gshared PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;
enum glWindowPos3sv = glad_glWindowPos3sv;
alias PFNGLBLENDCOLORPROC = void function (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern __gshared PFNGLBLENDCOLORPROC glad_glBlendColor;
enum glBlendColor = glad_glBlendColor;
alias PFNGLBLENDEQUATIONPROC = void function (GLenum mode);
extern __gshared PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
enum glBlendEquation = glad_glBlendEquation;

enum GL_VERSION_1_5 = 1;
extern __gshared int GLAD_GL_VERSION_1_5;
alias PFNGLGENQUERIESPROC = void function (GLsizei n, GLuint* ids);
extern __gshared PFNGLGENQUERIESPROC glad_glGenQueries;
enum glGenQueries = glad_glGenQueries;
alias PFNGLDELETEQUERIESPROC = void function (GLsizei n, const(GLuint)* ids);
extern __gshared PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
enum glDeleteQueries = glad_glDeleteQueries;
alias PFNGLISQUERYPROC = ubyte function (GLuint id);
extern __gshared PFNGLISQUERYPROC glad_glIsQuery;
enum glIsQuery = glad_glIsQuery;
alias PFNGLBEGINQUERYPROC = void function (GLenum target, GLuint id);
extern __gshared PFNGLBEGINQUERYPROC glad_glBeginQuery;
enum glBeginQuery = glad_glBeginQuery;
alias PFNGLENDQUERYPROC = void function (GLenum target);
extern __gshared PFNGLENDQUERYPROC glad_glEndQuery;
enum glEndQuery = glad_glEndQuery;
alias PFNGLGETQUERYIVPROC = void function (GLenum target, GLenum pname, GLint* params);
extern __gshared PFNGLGETQUERYIVPROC glad_glGetQueryiv;
enum glGetQueryiv = glad_glGetQueryiv;
alias PFNGLGETQUERYOBJECTIVPROC = void function (GLuint id, GLenum pname, GLint* params);
extern __gshared PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
enum glGetQueryObjectiv = glad_glGetQueryObjectiv;
alias PFNGLGETQUERYOBJECTUIVPROC = void function (GLuint id, GLenum pname, GLuint* params);
extern __gshared PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
enum glGetQueryObjectuiv = glad_glGetQueryObjectuiv;
alias PFNGLBINDBUFFERPROC = void function (GLenum target, GLuint buffer);
extern __gshared PFNGLBINDBUFFERPROC glad_glBindBuffer;
enum glBindBuffer = glad_glBindBuffer;
alias PFNGLDELETEBUFFERSPROC = void function (GLsizei n, const(GLuint)* buffers);
extern __gshared PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
enum glDeleteBuffers = glad_glDeleteBuffers;
alias PFNGLGENBUFFERSPROC = void function (GLsizei n, GLuint* buffers);
extern __gshared PFNGLGENBUFFERSPROC glad_glGenBuffers;
enum glGenBuffers = glad_glGenBuffers;
alias PFNGLISBUFFERPROC = ubyte function (GLuint buffer);
extern __gshared PFNGLISBUFFERPROC glad_glIsBuffer;
enum glIsBuffer = glad_glIsBuffer;
alias PFNGLBUFFERDATAPROC = void function (GLenum target, GLsizeiptr size, const(void)* data, GLenum usage);
extern __gshared PFNGLBUFFERDATAPROC glad_glBufferData;
enum glBufferData = glad_glBufferData;
alias PFNGLBUFFERSUBDATAPROC = void function (GLenum target, GLintptr offset, GLsizeiptr size, const(void)* data);
extern __gshared PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
enum glBufferSubData = glad_glBufferSubData;
alias PFNGLGETBUFFERSUBDATAPROC = void function (GLenum target, GLintptr offset, GLsizeiptr size, void* data);
extern __gshared PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
enum glGetBufferSubData = glad_glGetBufferSubData;
alias PFNGLMAPBUFFERPROC = void* function (GLenum target, GLenum access);
extern __gshared PFNGLMAPBUFFERPROC glad_glMapBuffer;
enum glMapBuffer = glad_glMapBuffer;
alias PFNGLUNMAPBUFFERPROC = ubyte function (GLenum target);
extern __gshared PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
enum glUnmapBuffer = glad_glUnmapBuffer;
alias PFNGLGETBUFFERPARAMETERIVPROC = void function (GLenum target, GLenum pname, GLint* params);
extern __gshared PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
enum glGetBufferParameteriv = glad_glGetBufferParameteriv;
alias PFNGLGETBUFFERPOINTERVPROC = void function (GLenum target, GLenum pname, void** params);
extern __gshared PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
enum glGetBufferPointerv = glad_glGetBufferPointerv;

enum GL_VERSION_2_0 = 1;
extern __gshared int GLAD_GL_VERSION_2_0;
alias PFNGLBLENDEQUATIONSEPARATEPROC = void function (GLenum modeRGB, GLenum modeAlpha);
extern __gshared PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
enum glBlendEquationSeparate = glad_glBlendEquationSeparate;
alias PFNGLDRAWBUFFERSPROC = void function (GLsizei n, const(GLenum)* bufs);
extern __gshared PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
enum glDrawBuffers = glad_glDrawBuffers;
alias PFNGLSTENCILOPSEPARATEPROC = void function (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
extern __gshared PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
enum glStencilOpSeparate = glad_glStencilOpSeparate;
alias PFNGLSTENCILFUNCSEPARATEPROC = void function (GLenum face, GLenum func, GLint ref_, GLuint mask);
extern __gshared PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
enum glStencilFuncSeparate = glad_glStencilFuncSeparate;
alias PFNGLSTENCILMASKSEPARATEPROC = void function (GLenum face, GLuint mask);
extern __gshared PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
enum glStencilMaskSeparate = glad_glStencilMaskSeparate;
alias PFNGLATTACHSHADERPROC = void function (GLuint program, GLuint shader);
extern __gshared PFNGLATTACHSHADERPROC glad_glAttachShader;
enum glAttachShader = glad_glAttachShader;
alias PFNGLBINDATTRIBLOCATIONPROC = void function (GLuint program, GLuint index, const(GLchar)* name);
extern __gshared PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
enum glBindAttribLocation = glad_glBindAttribLocation;
alias PFNGLCOMPILESHADERPROC = void function (GLuint shader);
extern __gshared PFNGLCOMPILESHADERPROC glad_glCompileShader;
enum glCompileShader = glad_glCompileShader;
alias PFNGLCREATEPROGRAMPROC = uint function ();
extern __gshared PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
enum glCreateProgram = glad_glCreateProgram;
alias PFNGLCREATESHADERPROC = uint function (GLenum type);
extern __gshared PFNGLCREATESHADERPROC glad_glCreateShader;
enum glCreateShader = glad_glCreateShader;
alias PFNGLDELETEPROGRAMPROC = void function (GLuint program);
extern __gshared PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
enum glDeleteProgram = glad_glDeleteProgram;
alias PFNGLDELETESHADERPROC = void function (GLuint shader);
extern __gshared PFNGLDELETESHADERPROC glad_glDeleteShader;
enum glDeleteShader = glad_glDeleteShader;
alias PFNGLDETACHSHADERPROC = void function (GLuint program, GLuint shader);
extern __gshared PFNGLDETACHSHADERPROC glad_glDetachShader;
enum glDetachShader = glad_glDetachShader;
alias PFNGLDISABLEVERTEXATTRIBARRAYPROC = void function (GLuint index);
extern __gshared PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
enum glDisableVertexAttribArray = glad_glDisableVertexAttribArray;
alias PFNGLENABLEVERTEXATTRIBARRAYPROC = void function (GLuint index);
extern __gshared PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
enum glEnableVertexAttribArray = glad_glEnableVertexAttribArray;
alias PFNGLGETACTIVEATTRIBPROC = void function (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
extern __gshared PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
enum glGetActiveAttrib = glad_glGetActiveAttrib;
alias PFNGLGETACTIVEUNIFORMPROC = void function (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
extern __gshared PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
enum glGetActiveUniform = glad_glGetActiveUniform;
alias PFNGLGETATTACHEDSHADERSPROC = void function (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
extern __gshared PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
enum glGetAttachedShaders = glad_glGetAttachedShaders;
alias PFNGLGETATTRIBLOCATIONPROC = int function (GLuint program, const(GLchar)* name);
extern __gshared PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
enum glGetAttribLocation = glad_glGetAttribLocation;
alias PFNGLGETPROGRAMIVPROC = void function (GLuint program, GLenum pname, GLint* params);
extern __gshared PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
enum glGetProgramiv = glad_glGetProgramiv;
alias PFNGLGETPROGRAMINFOLOGPROC = void function (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
extern __gshared PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
enum glGetProgramInfoLog = glad_glGetProgramInfoLog;
alias PFNGLGETSHADERIVPROC = void function (GLuint shader, GLenum pname, GLint* params);
extern __gshared PFNGLGETSHADERIVPROC glad_glGetShaderiv;
enum glGetShaderiv = glad_glGetShaderiv;
alias PFNGLGETSHADERINFOLOGPROC = void function (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
extern __gshared PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
enum glGetShaderInfoLog = glad_glGetShaderInfoLog;
alias PFNGLGETSHADERSOURCEPROC = void function (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
extern __gshared PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
enum glGetShaderSource = glad_glGetShaderSource;
alias PFNGLGETUNIFORMLOCATIONPROC = int function (GLuint program, const(GLchar)* name);
extern __gshared PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
enum glGetUniformLocation = glad_glGetUniformLocation;
alias PFNGLGETUNIFORMFVPROC = void function (GLuint program, GLint location, GLfloat* params);
extern __gshared PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
enum glGetUniformfv = glad_glGetUniformfv;
alias PFNGLGETUNIFORMIVPROC = void function (GLuint program, GLint location, GLint* params);
extern __gshared PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
enum glGetUniformiv = glad_glGetUniformiv;
alias PFNGLGETVERTEXATTRIBDVPROC = void function (GLuint index, GLenum pname, GLdouble* params);
extern __gshared PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
enum glGetVertexAttribdv = glad_glGetVertexAttribdv;
alias PFNGLGETVERTEXATTRIBFVPROC = void function (GLuint index, GLenum pname, GLfloat* params);
extern __gshared PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
enum glGetVertexAttribfv = glad_glGetVertexAttribfv;
alias PFNGLGETVERTEXATTRIBIVPROC = void function (GLuint index, GLenum pname, GLint* params);
extern __gshared PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
enum glGetVertexAttribiv = glad_glGetVertexAttribiv;
alias PFNGLGETVERTEXATTRIBPOINTERVPROC = void function (GLuint index, GLenum pname, void** pointer);
extern __gshared PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
enum glGetVertexAttribPointerv = glad_glGetVertexAttribPointerv;
alias PFNGLISPROGRAMPROC = ubyte function (GLuint program);
extern __gshared PFNGLISPROGRAMPROC glad_glIsProgram;
enum glIsProgram = glad_glIsProgram;
alias PFNGLISSHADERPROC = ubyte function (GLuint shader);
extern __gshared PFNGLISSHADERPROC glad_glIsShader;
enum glIsShader = glad_glIsShader;
alias PFNGLLINKPROGRAMPROC = void function (GLuint program);
extern __gshared PFNGLLINKPROGRAMPROC glad_glLinkProgram;
enum glLinkProgram = glad_glLinkProgram;
alias PFNGLSHADERSOURCEPROC = void function (GLuint shader, GLsizei count, const(GLchar*)* string, const(GLint)* length);
extern __gshared PFNGLSHADERSOURCEPROC glad_glShaderSource;
enum glShaderSource = glad_glShaderSource;
alias PFNGLUSEPROGRAMPROC = void function (GLuint program);
extern __gshared PFNGLUSEPROGRAMPROC glad_glUseProgram;
enum glUseProgram = glad_glUseProgram;
alias PFNGLUNIFORM1FPROC = void function (GLint location, GLfloat v0);
extern __gshared PFNGLUNIFORM1FPROC glad_glUniform1f;
enum glUniform1f = glad_glUniform1f;
alias PFNGLUNIFORM2FPROC = void function (GLint location, GLfloat v0, GLfloat v1);
extern __gshared PFNGLUNIFORM2FPROC glad_glUniform2f;
enum glUniform2f = glad_glUniform2f;
alias PFNGLUNIFORM3FPROC = void function (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern __gshared PFNGLUNIFORM3FPROC glad_glUniform3f;
enum glUniform3f = glad_glUniform3f;
alias PFNGLUNIFORM4FPROC = void function (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern __gshared PFNGLUNIFORM4FPROC glad_glUniform4f;
enum glUniform4f = glad_glUniform4f;
alias PFNGLUNIFORM1IPROC = void function (GLint location, GLint v0);
extern __gshared PFNGLUNIFORM1IPROC glad_glUniform1i;
enum glUniform1i = glad_glUniform1i;
alias PFNGLUNIFORM2IPROC = void function (GLint location, GLint v0, GLint v1);
extern __gshared PFNGLUNIFORM2IPROC glad_glUniform2i;
enum glUniform2i = glad_glUniform2i;
alias PFNGLUNIFORM3IPROC = void function (GLint location, GLint v0, GLint v1, GLint v2);
extern __gshared PFNGLUNIFORM3IPROC glad_glUniform3i;
enum glUniform3i = glad_glUniform3i;
alias PFNGLUNIFORM4IPROC = void function (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern __gshared PFNGLUNIFORM4IPROC glad_glUniform4i;
enum glUniform4i = glad_glUniform4i;
alias PFNGLUNIFORM1FVPROC = void function (GLint location, GLsizei count, const(GLfloat)* value);
extern __gshared PFNGLUNIFORM1FVPROC glad_glUniform1fv;
enum glUniform1fv = glad_glUniform1fv;
alias PFNGLUNIFORM2FVPROC = void function (GLint location, GLsizei count, const(GLfloat)* value);
extern __gshared PFNGLUNIFORM2FVPROC glad_glUniform2fv;
enum glUniform2fv = glad_glUniform2fv;
alias PFNGLUNIFORM3FVPROC = void function (GLint location, GLsizei count, const(GLfloat)* value);
extern __gshared PFNGLUNIFORM3FVPROC glad_glUniform3fv;
enum glUniform3fv = glad_glUniform3fv;
alias PFNGLUNIFORM4FVPROC = void function (GLint location, GLsizei count, const(GLfloat)* value);
extern __gshared PFNGLUNIFORM4FVPROC glad_glUniform4fv;
enum glUniform4fv = glad_glUniform4fv;
alias PFNGLUNIFORM1IVPROC = void function (GLint location, GLsizei count, const(GLint)* value);
extern __gshared PFNGLUNIFORM1IVPROC glad_glUniform1iv;
enum glUniform1iv = glad_glUniform1iv;
alias PFNGLUNIFORM2IVPROC = void function (GLint location, GLsizei count, const(GLint)* value);
extern __gshared PFNGLUNIFORM2IVPROC glad_glUniform2iv;
enum glUniform2iv = glad_glUniform2iv;
alias PFNGLUNIFORM3IVPROC = void function (GLint location, GLsizei count, const(GLint)* value);
extern __gshared PFNGLUNIFORM3IVPROC glad_glUniform3iv;
enum glUniform3iv = glad_glUniform3iv;
alias PFNGLUNIFORM4IVPROC = void function (GLint location, GLsizei count, const(GLint)* value);
extern __gshared PFNGLUNIFORM4IVPROC glad_glUniform4iv;
enum glUniform4iv = glad_glUniform4iv;
alias PFNGLUNIFORMMATRIX2FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
extern __gshared PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
enum glUniformMatrix2fv = glad_glUniformMatrix2fv;
alias PFNGLUNIFORMMATRIX3FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
extern __gshared PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
enum glUniformMatrix3fv = glad_glUniformMatrix3fv;
alias PFNGLUNIFORMMATRIX4FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
extern __gshared PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
enum glUniformMatrix4fv = glad_glUniformMatrix4fv;
alias PFNGLVALIDATEPROGRAMPROC = void function (GLuint program);
extern __gshared PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
enum glValidateProgram = glad_glValidateProgram;
alias PFNGLVERTEXATTRIB1DPROC = void function (GLuint index, GLdouble x);
extern __gshared PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
enum glVertexAttrib1d = glad_glVertexAttrib1d;
alias PFNGLVERTEXATTRIB1DVPROC = void function (GLuint index, const(GLdouble)* v);
extern __gshared PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
enum glVertexAttrib1dv = glad_glVertexAttrib1dv;
alias PFNGLVERTEXATTRIB1FPROC = void function (GLuint index, GLfloat x);
extern __gshared PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
enum glVertexAttrib1f = glad_glVertexAttrib1f;
alias PFNGLVERTEXATTRIB1FVPROC = void function (GLuint index, const(GLfloat)* v);
extern __gshared PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
enum glVertexAttrib1fv = glad_glVertexAttrib1fv;
alias PFNGLVERTEXATTRIB1SPROC = void function (GLuint index, GLshort x);
extern __gshared PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
enum glVertexAttrib1s = glad_glVertexAttrib1s;
alias PFNGLVERTEXATTRIB1SVPROC = void function (GLuint index, const(GLshort)* v);
extern __gshared PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
enum glVertexAttrib1sv = glad_glVertexAttrib1sv;
alias PFNGLVERTEXATTRIB2DPROC = void function (GLuint index, GLdouble x, GLdouble y);
extern __gshared PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
enum glVertexAttrib2d = glad_glVertexAttrib2d;
alias PFNGLVERTEXATTRIB2DVPROC = void function (GLuint index, const(GLdouble)* v);
extern __gshared PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
enum glVertexAttrib2dv = glad_glVertexAttrib2dv;
alias PFNGLVERTEXATTRIB2FPROC = void function (GLuint index, GLfloat x, GLfloat y);
extern __gshared PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
enum glVertexAttrib2f = glad_glVertexAttrib2f;
alias PFNGLVERTEXATTRIB2FVPROC = void function (GLuint index, const(GLfloat)* v);
extern __gshared PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
enum glVertexAttrib2fv = glad_glVertexAttrib2fv;
alias PFNGLVERTEXATTRIB2SPROC = void function (GLuint index, GLshort x, GLshort y);
extern __gshared PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
enum glVertexAttrib2s = glad_glVertexAttrib2s;
alias PFNGLVERTEXATTRIB2SVPROC = void function (GLuint index, const(GLshort)* v);
extern __gshared PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
enum glVertexAttrib2sv = glad_glVertexAttrib2sv;
alias PFNGLVERTEXATTRIB3DPROC = void function (GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern __gshared PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
enum glVertexAttrib3d = glad_glVertexAttrib3d;
alias PFNGLVERTEXATTRIB3DVPROC = void function (GLuint index, const(GLdouble)* v);
extern __gshared PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
enum glVertexAttrib3dv = glad_glVertexAttrib3dv;
alias PFNGLVERTEXATTRIB3FPROC = void function (GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern __gshared PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
enum glVertexAttrib3f = glad_glVertexAttrib3f;
alias PFNGLVERTEXATTRIB3FVPROC = void function (GLuint index, const(GLfloat)* v);
extern __gshared PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
enum glVertexAttrib3fv = glad_glVertexAttrib3fv;
alias PFNGLVERTEXATTRIB3SPROC = void function (GLuint index, GLshort x, GLshort y, GLshort z);
extern __gshared PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
enum glVertexAttrib3s = glad_glVertexAttrib3s;
alias PFNGLVERTEXATTRIB3SVPROC = void function (GLuint index, const(GLshort)* v);
extern __gshared PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
enum glVertexAttrib3sv = glad_glVertexAttrib3sv;
alias PFNGLVERTEXATTRIB4NBVPROC = void function (GLuint index, const(GLbyte)* v);
extern __gshared PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
enum glVertexAttrib4Nbv = glad_glVertexAttrib4Nbv;
alias PFNGLVERTEXATTRIB4NIVPROC = void function (GLuint index, const(GLint)* v);
extern __gshared PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
enum glVertexAttrib4Niv = glad_glVertexAttrib4Niv;
alias PFNGLVERTEXATTRIB4NSVPROC = void function (GLuint index, const(GLshort)* v);
extern __gshared PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
enum glVertexAttrib4Nsv = glad_glVertexAttrib4Nsv;
alias PFNGLVERTEXATTRIB4NUBPROC = void function (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
extern __gshared PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
enum glVertexAttrib4Nub = glad_glVertexAttrib4Nub;
alias PFNGLVERTEXATTRIB4NUBVPROC = void function (GLuint index, const(GLubyte)* v);
extern __gshared PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
enum glVertexAttrib4Nubv = glad_glVertexAttrib4Nubv;
alias PFNGLVERTEXATTRIB4NUIVPROC = void function (GLuint index, const(GLuint)* v);
extern __gshared PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
enum glVertexAttrib4Nuiv = glad_glVertexAttrib4Nuiv;
alias PFNGLVERTEXATTRIB4NUSVPROC = void function (GLuint index, const(GLushort)* v);
extern __gshared PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
enum glVertexAttrib4Nusv = glad_glVertexAttrib4Nusv;
alias PFNGLVERTEXATTRIB4BVPROC = void function (GLuint index, const(GLbyte)* v);
extern __gshared PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
enum glVertexAttrib4bv = glad_glVertexAttrib4bv;
alias PFNGLVERTEXATTRIB4DPROC = void function (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern __gshared PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
enum glVertexAttrib4d = glad_glVertexAttrib4d;
alias PFNGLVERTEXATTRIB4DVPROC = void function (GLuint index, const(GLdouble)* v);
extern __gshared PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
enum glVertexAttrib4dv = glad_glVertexAttrib4dv;
alias PFNGLVERTEXATTRIB4FPROC = void function (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern __gshared PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
enum glVertexAttrib4f = glad_glVertexAttrib4f;
alias PFNGLVERTEXATTRIB4FVPROC = void function (GLuint index, const(GLfloat)* v);
extern __gshared PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
enum glVertexAttrib4fv = glad_glVertexAttrib4fv;
alias PFNGLVERTEXATTRIB4IVPROC = void function (GLuint index, const(GLint)* v);
extern __gshared PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
enum glVertexAttrib4iv = glad_glVertexAttrib4iv;
alias PFNGLVERTEXATTRIB4SPROC = void function (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
extern __gshared PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
enum glVertexAttrib4s = glad_glVertexAttrib4s;
alias PFNGLVERTEXATTRIB4SVPROC = void function (GLuint index, const(GLshort)* v);
extern __gshared PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
enum glVertexAttrib4sv = glad_glVertexAttrib4sv;
alias PFNGLVERTEXATTRIB4UBVPROC = void function (GLuint index, const(GLubyte)* v);
extern __gshared PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
enum glVertexAttrib4ubv = glad_glVertexAttrib4ubv;
alias PFNGLVERTEXATTRIB4UIVPROC = void function (GLuint index, const(GLuint)* v);
extern __gshared PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
enum glVertexAttrib4uiv = glad_glVertexAttrib4uiv;
alias PFNGLVERTEXATTRIB4USVPROC = void function (GLuint index, const(GLushort)* v);
extern __gshared PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
enum glVertexAttrib4usv = glad_glVertexAttrib4usv;
alias PFNGLVERTEXATTRIBPOINTERPROC = void function (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
enum glVertexAttribPointer = glad_glVertexAttribPointer;

enum GL_VERSION_2_1 = 1;
extern __gshared int GLAD_GL_VERSION_2_1;
alias PFNGLUNIFORMMATRIX2X3FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
extern __gshared PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
enum glUniformMatrix2x3fv = glad_glUniformMatrix2x3fv;
alias PFNGLUNIFORMMATRIX3X2FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
extern __gshared PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
enum glUniformMatrix3x2fv = glad_glUniformMatrix3x2fv;
alias PFNGLUNIFORMMATRIX2X4FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
extern __gshared PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
enum glUniformMatrix2x4fv = glad_glUniformMatrix2x4fv;
alias PFNGLUNIFORMMATRIX4X2FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
extern __gshared PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
enum glUniformMatrix4x2fv = glad_glUniformMatrix4x2fv;
alias PFNGLUNIFORMMATRIX3X4FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
extern __gshared PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
enum glUniformMatrix3x4fv = glad_glUniformMatrix3x4fv;
alias PFNGLUNIFORMMATRIX4X3FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
extern __gshared PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
enum glUniformMatrix4x3fv = glad_glUniformMatrix4x3fv;

enum GL_VERSION_3_0 = 1;
extern __gshared int GLAD_GL_VERSION_3_0;
alias PFNGLCOLORMASKIPROC = void function (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
extern __gshared PFNGLCOLORMASKIPROC glad_glColorMaski;
enum glColorMaski = glad_glColorMaski;
alias PFNGLGETBOOLEANI_VPROC = void function (GLenum target, GLuint index, GLboolean* data);
extern __gshared PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
enum glGetBooleani_v = glad_glGetBooleani_v;
alias PFNGLGETINTEGERI_VPROC = void function (GLenum target, GLuint index, GLint* data);
extern __gshared PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
enum glGetIntegeri_v = glad_glGetIntegeri_v;
alias PFNGLENABLEIPROC = void function (GLenum target, GLuint index);
extern __gshared PFNGLENABLEIPROC glad_glEnablei;
enum glEnablei = glad_glEnablei;
alias PFNGLDISABLEIPROC = void function (GLenum target, GLuint index);
extern __gshared PFNGLDISABLEIPROC glad_glDisablei;
enum glDisablei = glad_glDisablei;
alias PFNGLISENABLEDIPROC = ubyte function (GLenum target, GLuint index);
extern __gshared PFNGLISENABLEDIPROC glad_glIsEnabledi;
enum glIsEnabledi = glad_glIsEnabledi;
alias PFNGLBEGINTRANSFORMFEEDBACKPROC = void function (GLenum primitiveMode);
extern __gshared PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
enum glBeginTransformFeedback = glad_glBeginTransformFeedback;
alias PFNGLENDTRANSFORMFEEDBACKPROC = void function ();
extern __gshared PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
enum glEndTransformFeedback = glad_glEndTransformFeedback;
alias PFNGLBINDBUFFERRANGEPROC = void function (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern __gshared PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
enum glBindBufferRange = glad_glBindBufferRange;
alias PFNGLBINDBUFFERBASEPROC = void function (GLenum target, GLuint index, GLuint buffer);
extern __gshared PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
enum glBindBufferBase = glad_glBindBufferBase;
alias PFNGLTRANSFORMFEEDBACKVARYINGSPROC = void function (GLuint program, GLsizei count, const(GLchar*)* varyings, GLenum bufferMode);
extern __gshared PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
enum glTransformFeedbackVaryings = glad_glTransformFeedbackVaryings;
alias PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = void function (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
extern __gshared PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
enum glGetTransformFeedbackVarying = glad_glGetTransformFeedbackVarying;
alias PFNGLCLAMPCOLORPROC = void function (GLenum target, GLenum clamp);
extern __gshared PFNGLCLAMPCOLORPROC glad_glClampColor;
enum glClampColor = glad_glClampColor;
alias PFNGLBEGINCONDITIONALRENDERPROC = void function (GLuint id, GLenum mode);
extern __gshared PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
enum glBeginConditionalRender = glad_glBeginConditionalRender;
alias PFNGLENDCONDITIONALRENDERPROC = void function ();
extern __gshared PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
enum glEndConditionalRender = glad_glEndConditionalRender;
alias PFNGLVERTEXATTRIBIPOINTERPROC = void function (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer);
extern __gshared PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
enum glVertexAttribIPointer = glad_glVertexAttribIPointer;
alias PFNGLGETVERTEXATTRIBIIVPROC = void function (GLuint index, GLenum pname, GLint* params);
extern __gshared PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
enum glGetVertexAttribIiv = glad_glGetVertexAttribIiv;
alias PFNGLGETVERTEXATTRIBIUIVPROC = void function (GLuint index, GLenum pname, GLuint* params);
extern __gshared PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
enum glGetVertexAttribIuiv = glad_glGetVertexAttribIuiv;
alias PFNGLVERTEXATTRIBI1IPROC = void function (GLuint index, GLint x);
extern __gshared PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
enum glVertexAttribI1i = glad_glVertexAttribI1i;
alias PFNGLVERTEXATTRIBI2IPROC = void function (GLuint index, GLint x, GLint y);
extern __gshared PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
enum glVertexAttribI2i = glad_glVertexAttribI2i;
alias PFNGLVERTEXATTRIBI3IPROC = void function (GLuint index, GLint x, GLint y, GLint z);
extern __gshared PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
enum glVertexAttribI3i = glad_glVertexAttribI3i;
alias PFNGLVERTEXATTRIBI4IPROC = void function (GLuint index, GLint x, GLint y, GLint z, GLint w);
extern __gshared PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
enum glVertexAttribI4i = glad_glVertexAttribI4i;
alias PFNGLVERTEXATTRIBI1UIPROC = void function (GLuint index, GLuint x);
extern __gshared PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
enum glVertexAttribI1ui = glad_glVertexAttribI1ui;
alias PFNGLVERTEXATTRIBI2UIPROC = void function (GLuint index, GLuint x, GLuint y);
extern __gshared PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
enum glVertexAttribI2ui = glad_glVertexAttribI2ui;
alias PFNGLVERTEXATTRIBI3UIPROC = void function (GLuint index, GLuint x, GLuint y, GLuint z);
extern __gshared PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
enum glVertexAttribI3ui = glad_glVertexAttribI3ui;
alias PFNGLVERTEXATTRIBI4UIPROC = void function (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
extern __gshared PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
enum glVertexAttribI4ui = glad_glVertexAttribI4ui;
alias PFNGLVERTEXATTRIBI1IVPROC = void function (GLuint index, const(GLint)* v);
extern __gshared PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
enum glVertexAttribI1iv = glad_glVertexAttribI1iv;
alias PFNGLVERTEXATTRIBI2IVPROC = void function (GLuint index, const(GLint)* v);
extern __gshared PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
enum glVertexAttribI2iv = glad_glVertexAttribI2iv;
alias PFNGLVERTEXATTRIBI3IVPROC = void function (GLuint index, const(GLint)* v);
extern __gshared PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
enum glVertexAttribI3iv = glad_glVertexAttribI3iv;
alias PFNGLVERTEXATTRIBI4IVPROC = void function (GLuint index, const(GLint)* v);
extern __gshared PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
enum glVertexAttribI4iv = glad_glVertexAttribI4iv;
alias PFNGLVERTEXATTRIBI1UIVPROC = void function (GLuint index, const(GLuint)* v);
extern __gshared PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
enum glVertexAttribI1uiv = glad_glVertexAttribI1uiv;
alias PFNGLVERTEXATTRIBI2UIVPROC = void function (GLuint index, const(GLuint)* v);
extern __gshared PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
enum glVertexAttribI2uiv = glad_glVertexAttribI2uiv;
alias PFNGLVERTEXATTRIBI3UIVPROC = void function (GLuint index, const(GLuint)* v);
extern __gshared PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
enum glVertexAttribI3uiv = glad_glVertexAttribI3uiv;
alias PFNGLVERTEXATTRIBI4UIVPROC = void function (GLuint index, const(GLuint)* v);
extern __gshared PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
enum glVertexAttribI4uiv = glad_glVertexAttribI4uiv;
alias PFNGLVERTEXATTRIBI4BVPROC = void function (GLuint index, const(GLbyte)* v);
extern __gshared PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
enum glVertexAttribI4bv = glad_glVertexAttribI4bv;
alias PFNGLVERTEXATTRIBI4SVPROC = void function (GLuint index, const(GLshort)* v);
extern __gshared PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
enum glVertexAttribI4sv = glad_glVertexAttribI4sv;
alias PFNGLVERTEXATTRIBI4UBVPROC = void function (GLuint index, const(GLubyte)* v);
extern __gshared PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
enum glVertexAttribI4ubv = glad_glVertexAttribI4ubv;
alias PFNGLVERTEXATTRIBI4USVPROC = void function (GLuint index, const(GLushort)* v);
extern __gshared PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
enum glVertexAttribI4usv = glad_glVertexAttribI4usv;
alias PFNGLGETUNIFORMUIVPROC = void function (GLuint program, GLint location, GLuint* params);
extern __gshared PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
enum glGetUniformuiv = glad_glGetUniformuiv;
alias PFNGLBINDFRAGDATALOCATIONPROC = void function (GLuint program, GLuint color, const(GLchar)* name);
extern __gshared PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
enum glBindFragDataLocation = glad_glBindFragDataLocation;
alias PFNGLGETFRAGDATALOCATIONPROC = int function (GLuint program, const(GLchar)* name);
extern __gshared PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
enum glGetFragDataLocation = glad_glGetFragDataLocation;
alias PFNGLUNIFORM1UIPROC = void function (GLint location, GLuint v0);
extern __gshared PFNGLUNIFORM1UIPROC glad_glUniform1ui;
enum glUniform1ui = glad_glUniform1ui;
alias PFNGLUNIFORM2UIPROC = void function (GLint location, GLuint v0, GLuint v1);
extern __gshared PFNGLUNIFORM2UIPROC glad_glUniform2ui;
enum glUniform2ui = glad_glUniform2ui;
alias PFNGLUNIFORM3UIPROC = void function (GLint location, GLuint v0, GLuint v1, GLuint v2);
extern __gshared PFNGLUNIFORM3UIPROC glad_glUniform3ui;
enum glUniform3ui = glad_glUniform3ui;
alias PFNGLUNIFORM4UIPROC = void function (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern __gshared PFNGLUNIFORM4UIPROC glad_glUniform4ui;
enum glUniform4ui = glad_glUniform4ui;
alias PFNGLUNIFORM1UIVPROC = void function (GLint location, GLsizei count, const(GLuint)* value);
extern __gshared PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
enum glUniform1uiv = glad_glUniform1uiv;
alias PFNGLUNIFORM2UIVPROC = void function (GLint location, GLsizei count, const(GLuint)* value);
extern __gshared PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
enum glUniform2uiv = glad_glUniform2uiv;
alias PFNGLUNIFORM3UIVPROC = void function (GLint location, GLsizei count, const(GLuint)* value);
extern __gshared PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
enum glUniform3uiv = glad_glUniform3uiv;
alias PFNGLUNIFORM4UIVPROC = void function (GLint location, GLsizei count, const(GLuint)* value);
extern __gshared PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
enum glUniform4uiv = glad_glUniform4uiv;
alias PFNGLTEXPARAMETERIIVPROC = void function (GLenum target, GLenum pname, const(GLint)* params);
extern __gshared PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
enum glTexParameterIiv = glad_glTexParameterIiv;
alias PFNGLTEXPARAMETERIUIVPROC = void function (GLenum target, GLenum pname, const(GLuint)* params);
extern __gshared PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
enum glTexParameterIuiv = glad_glTexParameterIuiv;
alias PFNGLGETTEXPARAMETERIIVPROC = void function (GLenum target, GLenum pname, GLint* params);
extern __gshared PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
enum glGetTexParameterIiv = glad_glGetTexParameterIiv;
alias PFNGLGETTEXPARAMETERIUIVPROC = void function (GLenum target, GLenum pname, GLuint* params);
extern __gshared PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
enum glGetTexParameterIuiv = glad_glGetTexParameterIuiv;
alias PFNGLCLEARBUFFERIVPROC = void function (GLenum buffer, GLint drawbuffer, const(GLint)* value);
extern __gshared PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
enum glClearBufferiv = glad_glClearBufferiv;
alias PFNGLCLEARBUFFERUIVPROC = void function (GLenum buffer, GLint drawbuffer, const(GLuint)* value);
extern __gshared PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
enum glClearBufferuiv = glad_glClearBufferuiv;
alias PFNGLCLEARBUFFERFVPROC = void function (GLenum buffer, GLint drawbuffer, const(GLfloat)* value);
extern __gshared PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
enum glClearBufferfv = glad_glClearBufferfv;
alias PFNGLCLEARBUFFERFIPROC = void function (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern __gshared PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
enum glClearBufferfi = glad_glClearBufferfi;
alias PFNGLGETSTRINGIPROC = const(ubyte)* function (GLenum name, GLuint index);
extern __gshared PFNGLGETSTRINGIPROC glad_glGetStringi;
enum glGetStringi = glad_glGetStringi;
alias PFNGLISRENDERBUFFERPROC = ubyte function (GLuint renderbuffer);
extern __gshared PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
enum glIsRenderbuffer = glad_glIsRenderbuffer;
alias PFNGLBINDRENDERBUFFERPROC = void function (GLenum target, GLuint renderbuffer);
extern __gshared PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
enum glBindRenderbuffer = glad_glBindRenderbuffer;
alias PFNGLDELETERENDERBUFFERSPROC = void function (GLsizei n, const(GLuint)* renderbuffers);
extern __gshared PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
enum glDeleteRenderbuffers = glad_glDeleteRenderbuffers;
alias PFNGLGENRENDERBUFFERSPROC = void function (GLsizei n, GLuint* renderbuffers);
extern __gshared PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
enum glGenRenderbuffers = glad_glGenRenderbuffers;
alias PFNGLRENDERBUFFERSTORAGEPROC = void function (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern __gshared PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
enum glRenderbufferStorage = glad_glRenderbufferStorage;
alias PFNGLGETRENDERBUFFERPARAMETERIVPROC = void function (GLenum target, GLenum pname, GLint* params);
extern __gshared PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
enum glGetRenderbufferParameteriv = glad_glGetRenderbufferParameteriv;
alias PFNGLISFRAMEBUFFERPROC = ubyte function (GLuint framebuffer);
extern __gshared PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
enum glIsFramebuffer = glad_glIsFramebuffer;
alias PFNGLBINDFRAMEBUFFERPROC = void function (GLenum target, GLuint framebuffer);
extern __gshared PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
enum glBindFramebuffer = glad_glBindFramebuffer;
alias PFNGLDELETEFRAMEBUFFERSPROC = void function (GLsizei n, const(GLuint)* framebuffers);
extern __gshared PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
enum glDeleteFramebuffers = glad_glDeleteFramebuffers;
alias PFNGLGENFRAMEBUFFERSPROC = void function (GLsizei n, GLuint* framebuffers);
extern __gshared PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
enum glGenFramebuffers = glad_glGenFramebuffers;
alias PFNGLCHECKFRAMEBUFFERSTATUSPROC = uint function (GLenum target);
extern __gshared PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
enum glCheckFramebufferStatus = glad_glCheckFramebufferStatus;
alias PFNGLFRAMEBUFFERTEXTURE1DPROC = void function (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern __gshared PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
enum glFramebufferTexture1D = glad_glFramebufferTexture1D;
alias PFNGLFRAMEBUFFERTEXTURE2DPROC = void function (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern __gshared PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
enum glFramebufferTexture2D = glad_glFramebufferTexture2D;
alias PFNGLFRAMEBUFFERTEXTURE3DPROC = void function (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern __gshared PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
enum glFramebufferTexture3D = glad_glFramebufferTexture3D;
alias PFNGLFRAMEBUFFERRENDERBUFFERPROC = void function (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern __gshared PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
enum glFramebufferRenderbuffer = glad_glFramebufferRenderbuffer;
alias PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void function (GLenum target, GLenum attachment, GLenum pname, GLint* params);
extern __gshared PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
enum glGetFramebufferAttachmentParameteriv = glad_glGetFramebufferAttachmentParameteriv;
alias PFNGLGENERATEMIPMAPPROC = void function (GLenum target);
extern __gshared PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
enum glGenerateMipmap = glad_glGenerateMipmap;
alias PFNGLBLITFRAMEBUFFERPROC = void function (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern __gshared PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
enum glBlitFramebuffer = glad_glBlitFramebuffer;
alias PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = void function (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern __gshared PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
enum glRenderbufferStorageMultisample = glad_glRenderbufferStorageMultisample;
alias PFNGLFRAMEBUFFERTEXTURELAYERPROC = void function (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern __gshared PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
enum glFramebufferTextureLayer = glad_glFramebufferTextureLayer;
alias PFNGLMAPBUFFERRANGEPROC = void* function (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern __gshared PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
enum glMapBufferRange = glad_glMapBufferRange;
alias PFNGLFLUSHMAPPEDBUFFERRANGEPROC = void function (GLenum target, GLintptr offset, GLsizeiptr length);
extern __gshared PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
enum glFlushMappedBufferRange = glad_glFlushMappedBufferRange;
alias PFNGLBINDVERTEXARRAYPROC = void function (GLuint array);
extern __gshared PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
enum glBindVertexArray = glad_glBindVertexArray;
alias PFNGLDELETEVERTEXARRAYSPROC = void function (GLsizei n, const(GLuint)* arrays);
extern __gshared PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
enum glDeleteVertexArrays = glad_glDeleteVertexArrays;
alias PFNGLGENVERTEXARRAYSPROC = void function (GLsizei n, GLuint* arrays);
extern __gshared PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
enum glGenVertexArrays = glad_glGenVertexArrays;
alias PFNGLISVERTEXARRAYPROC = ubyte function (GLuint array);
extern __gshared PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
enum glIsVertexArray = glad_glIsVertexArray;

enum GL_VERSION_3_1 = 1;
extern __gshared int GLAD_GL_VERSION_3_1;
alias PFNGLDRAWARRAYSINSTANCEDPROC = void function (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
extern __gshared PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
enum glDrawArraysInstanced = glad_glDrawArraysInstanced;
alias PFNGLDRAWELEMENTSINSTANCEDPROC = void function (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount);
extern __gshared PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
enum glDrawElementsInstanced = glad_glDrawElementsInstanced;
alias PFNGLTEXBUFFERPROC = void function (GLenum target, GLenum internalformat, GLuint buffer);
extern __gshared PFNGLTEXBUFFERPROC glad_glTexBuffer;
enum glTexBuffer = glad_glTexBuffer;
alias PFNGLPRIMITIVERESTARTINDEXPROC = void function (GLuint index);
extern __gshared PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
enum glPrimitiveRestartIndex = glad_glPrimitiveRestartIndex;
alias PFNGLCOPYBUFFERSUBDATAPROC = void function (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern __gshared PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
enum glCopyBufferSubData = glad_glCopyBufferSubData;
alias PFNGLGETUNIFORMINDICESPROC = void function (GLuint program, GLsizei uniformCount, const(GLchar*)* uniformNames, GLuint* uniformIndices);
extern __gshared PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
enum glGetUniformIndices = glad_glGetUniformIndices;
alias PFNGLGETACTIVEUNIFORMSIVPROC = void function (GLuint program, GLsizei uniformCount, const(GLuint)* uniformIndices, GLenum pname, GLint* params);
extern __gshared PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
enum glGetActiveUniformsiv = glad_glGetActiveUniformsiv;
alias PFNGLGETACTIVEUNIFORMNAMEPROC = void function (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
extern __gshared PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
enum glGetActiveUniformName = glad_glGetActiveUniformName;
alias PFNGLGETUNIFORMBLOCKINDEXPROC = uint function (GLuint program, const(GLchar)* uniformBlockName);
extern __gshared PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
enum glGetUniformBlockIndex = glad_glGetUniformBlockIndex;
alias PFNGLGETACTIVEUNIFORMBLOCKIVPROC = void function (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
extern __gshared PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
enum glGetActiveUniformBlockiv = glad_glGetActiveUniformBlockiv;
alias PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = void function (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
extern __gshared PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
enum glGetActiveUniformBlockName = glad_glGetActiveUniformBlockName;
alias PFNGLUNIFORMBLOCKBINDINGPROC = void function (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
extern __gshared PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
enum glUniformBlockBinding = glad_glUniformBlockBinding;

enum GL_VERSION_3_2 = 1;
extern __gshared int GLAD_GL_VERSION_3_2;
alias PFNGLDRAWELEMENTSBASEVERTEXPROC = void function (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLint basevertex);
extern __gshared PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
enum glDrawElementsBaseVertex = glad_glDrawElementsBaseVertex;
alias PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = void function (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices, GLint basevertex);
extern __gshared PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
enum glDrawRangeElementsBaseVertex = glad_glDrawRangeElementsBaseVertex;
alias PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = void function (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex);
extern __gshared PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
enum glDrawElementsInstancedBaseVertex = glad_glDrawElementsInstancedBaseVertex;
alias PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = void function (GLenum mode, const(GLsizei)* count, GLenum type, const(void*)* indices, GLsizei drawcount, const(GLint)* basevertex);
extern __gshared PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
enum glMultiDrawElementsBaseVertex = glad_glMultiDrawElementsBaseVertex;
alias PFNGLPROVOKINGVERTEXPROC = void function (GLenum mode);
extern __gshared PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
enum glProvokingVertex = glad_glProvokingVertex;
alias PFNGLFENCESYNCPROC = __GLsync* function (GLenum condition, GLbitfield flags);
extern __gshared PFNGLFENCESYNCPROC glad_glFenceSync;
enum glFenceSync = glad_glFenceSync;
alias PFNGLISSYNCPROC = ubyte function (GLsync sync);
extern __gshared PFNGLISSYNCPROC glad_glIsSync;
enum glIsSync = glad_glIsSync;
alias PFNGLDELETESYNCPROC = void function (GLsync sync);
extern __gshared PFNGLDELETESYNCPROC glad_glDeleteSync;
enum glDeleteSync = glad_glDeleteSync;
alias PFNGLCLIENTWAITSYNCPROC = uint function (GLsync sync, GLbitfield flags, GLuint64 timeout);
extern __gshared PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
enum glClientWaitSync = glad_glClientWaitSync;
alias PFNGLWAITSYNCPROC = void function (GLsync sync, GLbitfield flags, GLuint64 timeout);
extern __gshared PFNGLWAITSYNCPROC glad_glWaitSync;
enum glWaitSync = glad_glWaitSync;
alias PFNGLGETINTEGER64VPROC = void function (GLenum pname, GLint64* data);
extern __gshared PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
enum glGetInteger64v = glad_glGetInteger64v;
alias PFNGLGETSYNCIVPROC = void function (GLsync sync, GLenum pname, GLsizei count, GLsizei* length, GLint* values);
extern __gshared PFNGLGETSYNCIVPROC glad_glGetSynciv;
enum glGetSynciv = glad_glGetSynciv;
alias PFNGLGETINTEGER64I_VPROC = void function (GLenum target, GLuint index, GLint64* data);
extern __gshared PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
enum glGetInteger64i_v = glad_glGetInteger64i_v;
alias PFNGLGETBUFFERPARAMETERI64VPROC = void function (GLenum target, GLenum pname, GLint64* params);
extern __gshared PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
enum glGetBufferParameteri64v = glad_glGetBufferParameteri64v;
alias PFNGLFRAMEBUFFERTEXTUREPROC = void function (GLenum target, GLenum attachment, GLuint texture, GLint level);
extern __gshared PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
enum glFramebufferTexture = glad_glFramebufferTexture;
alias PFNGLTEXIMAGE2DMULTISAMPLEPROC = void function (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern __gshared PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
enum glTexImage2DMultisample = glad_glTexImage2DMultisample;
alias PFNGLTEXIMAGE3DMULTISAMPLEPROC = void function (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern __gshared PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
enum glTexImage3DMultisample = glad_glTexImage3DMultisample;
alias PFNGLGETMULTISAMPLEFVPROC = void function (GLenum pname, GLuint index, GLfloat* val);
extern __gshared PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
enum glGetMultisamplefv = glad_glGetMultisamplefv;
alias PFNGLSAMPLEMASKIPROC = void function (GLuint maskNumber, GLbitfield mask);
extern __gshared PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
enum glSampleMaski = glad_glSampleMaski;

